'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.6400
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("informeUnicoDS"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class informeUnicoDS
    Inherits Global.System.Data.DataSet
    
    Private tableVISTAINFORMEUNICO As VISTAINFORMEUNICODataTable
    
    Private tableINFORMANTES As INFORMANTESDataTable
    
    Private tableVISTA_REP_GRUPO_FAMILIAR As VISTA_REP_GRUPO_FAMILIARDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("VISTAINFORMEUNICO")) Is Nothing) Then
                MyBase.Tables.Add(New VISTAINFORMEUNICODataTable(ds.Tables("VISTAINFORMEUNICO")))
            End If
            If (Not (ds.Tables("INFORMANTES")) Is Nothing) Then
                MyBase.Tables.Add(New INFORMANTESDataTable(ds.Tables("INFORMANTES")))
            End If
            If (Not (ds.Tables("VISTA_REP_GRUPO_FAMILIAR")) Is Nothing) Then
                MyBase.Tables.Add(New VISTA_REP_GRUPO_FAMILIARDataTable(ds.Tables("VISTA_REP_GRUPO_FAMILIAR")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VISTAINFORMEUNICO() As VISTAINFORMEUNICODataTable
        Get
            Return Me.tableVISTAINFORMEUNICO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property INFORMANTES() As INFORMANTESDataTable
        Get
            Return Me.tableINFORMANTES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VISTA_REP_GRUPO_FAMILIAR() As VISTA_REP_GRUPO_FAMILIARDataTable
        Get
            Return Me.tableVISTA_REP_GRUPO_FAMILIAR
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As informeUnicoDS = CType(MyBase.Clone,informeUnicoDS)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("VISTAINFORMEUNICO")) Is Nothing) Then
                MyBase.Tables.Add(New VISTAINFORMEUNICODataTable(ds.Tables("VISTAINFORMEUNICO")))
            End If
            If (Not (ds.Tables("INFORMANTES")) Is Nothing) Then
                MyBase.Tables.Add(New INFORMANTESDataTable(ds.Tables("INFORMANTES")))
            End If
            If (Not (ds.Tables("VISTA_REP_GRUPO_FAMILIAR")) Is Nothing) Then
                MyBase.Tables.Add(New VISTA_REP_GRUPO_FAMILIARDataTable(ds.Tables("VISTA_REP_GRUPO_FAMILIAR")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableVISTAINFORMEUNICO = CType(MyBase.Tables("VISTAINFORMEUNICO"),VISTAINFORMEUNICODataTable)
        If (initTable = true) Then
            If (Not (Me.tableVISTAINFORMEUNICO) Is Nothing) Then
                Me.tableVISTAINFORMEUNICO.InitVars
            End If
        End If
        Me.tableINFORMANTES = CType(MyBase.Tables("INFORMANTES"),INFORMANTESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableINFORMANTES) Is Nothing) Then
                Me.tableINFORMANTES.InitVars
            End If
        End If
        Me.tableVISTA_REP_GRUPO_FAMILIAR = CType(MyBase.Tables("VISTA_REP_GRUPO_FAMILIAR"),VISTA_REP_GRUPO_FAMILIARDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVISTA_REP_GRUPO_FAMILIAR) Is Nothing) Then
                Me.tableVISTA_REP_GRUPO_FAMILIAR.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "informeUnicoDS"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/informeUnicoDS.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableVISTAINFORMEUNICO = New VISTAINFORMEUNICODataTable
        MyBase.Tables.Add(Me.tableVISTAINFORMEUNICO)
        Me.tableINFORMANTES = New INFORMANTESDataTable
        MyBase.Tables.Add(Me.tableINFORMANTES)
        Me.tableVISTA_REP_GRUPO_FAMILIAR = New VISTA_REP_GRUPO_FAMILIARDataTable
        MyBase.Tables.Add(Me.tableVISTA_REP_GRUPO_FAMILIAR)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVISTAINFORMEUNICO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeINFORMANTES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVISTA_REP_GRUPO_FAMILIAR() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As informeUnicoDS = New informeUnicoDS
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub VISTAINFORMEUNICORowChangeEventHandler(ByVal sender As Object, ByVal e As VISTAINFORMEUNICORowChangeEvent)
    
    Public Delegate Sub INFORMANTESRowChangeEventHandler(ByVal sender As Object, ByVal e As INFORMANTESRowChangeEvent)
    
    Public Delegate Sub VISTA_REP_GRUPO_FAMILIARRowChangeEventHandler(ByVal sender As Object, ByVal e As VISTA_REP_GRUPO_FAMILIARRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VISTAINFORMEUNICODataTable
        Inherits Global.System.Data.TypedTableBase(Of VISTAINFORMEUNICORow)
        
        Private columndemandado As Global.System.Data.DataColumn
        
        Private columninfCodigo As Global.System.Data.DataColumn
        
        Private columnunidadJudicial As Global.System.Data.DataColumn
        
        Private columnjuez As Global.System.Data.DataColumn
        
        Private columninfSol As Global.System.Data.DataColumn
        
        Private columnnumCausa As Global.System.Data.DataColumn
        
        Private columnaccion As Global.System.Data.DataColumn
        
        Private columnsuj_der_Noms As Global.System.Data.DataColumn
        
        Private columnsuj_der_DatosNacimiento As Global.System.Data.DataColumn
        
        Private columnsuj_der_Edad As Global.System.Data.DataColumn
        
        Private columnsuj_der_Ocupacion As Global.System.Data.DataColumn
        
        Private columnsuj_der_genero As Global.System.Data.DataColumn
        
        Private columnsuj_der_EstadoCivil As Global.System.Data.DataColumn
        
        Private columnsuj_der_Domicilio As Global.System.Data.DataColumn
        
        Private columnmetodologia As Global.System.Data.DataColumn
        
        Private columnsitVivienda As Global.System.Data.DataColumn
        
        Private columnentrevistaRealizada As Global.System.Data.DataColumn
        
        Private columnaccionesRealizadas As Global.System.Data.DataColumn
        
        Private columnrecomendaciones As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VISTAINFORMEUNICO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property demandadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndemandado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property infCodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninfCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unidadJudicialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunidadJudicial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property juezColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjuez
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property infSolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninfSol
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property numCausaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnumCausa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property accionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property suj_der_NomsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsuj_der_Noms
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property suj_der_DatosNacimientoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsuj_der_DatosNacimiento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property suj_der_EdadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsuj_der_Edad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property suj_der_OcupacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsuj_der_Ocupacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property suj_der_generoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsuj_der_genero
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property suj_der_EstadoCivilColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsuj_der_EstadoCivil
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property suj_der_DomicilioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsuj_der_Domicilio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property metodologiaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmetodologia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sitViviendaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsitVivienda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property entrevistaRealizadaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnentrevistaRealizada
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property accionesRealizadasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaccionesRealizadas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property recomendacionesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrecomendaciones
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VISTAINFORMEUNICORow
            Get
                Return CType(Me.Rows(index),VISTAINFORMEUNICORow)
            End Get
        End Property
        
        Public Event VISTAINFORMEUNICORowChanging As VISTAINFORMEUNICORowChangeEventHandler
        
        Public Event VISTAINFORMEUNICORowChanged As VISTAINFORMEUNICORowChangeEventHandler
        
        Public Event VISTAINFORMEUNICORowDeleting As VISTAINFORMEUNICORowChangeEventHandler
        
        Public Event VISTAINFORMEUNICORowDeleted As VISTAINFORMEUNICORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVISTAINFORMEUNICORow(ByVal row As VISTAINFORMEUNICORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVISTAINFORMEUNICORow( _
                    ByVal demandado As String,  _
                    ByVal infCodigo As Integer,  _
                    ByVal unidadJudicial As String,  _
                    ByVal juez As String,  _
                    ByVal infSol As String,  _
                    ByVal numCausa As String,  _
                    ByVal accion As String,  _
                    ByVal suj_der_Noms As String,  _
                    ByVal suj_der_DatosNacimiento As String,  _
                    ByVal suj_der_Edad As Integer,  _
                    ByVal suj_der_Ocupacion As String,  _
                    ByVal suj_der_genero As String,  _
                    ByVal suj_der_EstadoCivil As String,  _
                    ByVal suj_der_Domicilio As String,  _
                    ByVal metodologia As String,  _
                    ByVal sitVivienda As String,  _
                    ByVal entrevistaRealizada As String,  _
                    ByVal accionesRealizadas As String,  _
                    ByVal recomendaciones As String) As VISTAINFORMEUNICORow
            Dim rowVISTAINFORMEUNICORow As VISTAINFORMEUNICORow = CType(Me.NewRow,VISTAINFORMEUNICORow)
            Dim columnValuesArray() As Object = New Object() {demandado, infCodigo, unidadJudicial, juez, infSol, numCausa, accion, suj_der_Noms, suj_der_DatosNacimiento, suj_der_Edad, suj_der_Ocupacion, suj_der_genero, suj_der_EstadoCivil, suj_der_Domicilio, metodologia, sitVivienda, entrevistaRealizada, accionesRealizadas, recomendaciones}
            rowVISTAINFORMEUNICORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVISTAINFORMEUNICORow)
            Return rowVISTAINFORMEUNICORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VISTAINFORMEUNICODataTable = CType(MyBase.Clone,VISTAINFORMEUNICODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VISTAINFORMEUNICODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columndemandado = MyBase.Columns("demandado")
            Me.columninfCodigo = MyBase.Columns("infCodigo")
            Me.columnunidadJudicial = MyBase.Columns("unidadJudicial")
            Me.columnjuez = MyBase.Columns("juez")
            Me.columninfSol = MyBase.Columns("infSol")
            Me.columnnumCausa = MyBase.Columns("numCausa")
            Me.columnaccion = MyBase.Columns("accion")
            Me.columnsuj_der_Noms = MyBase.Columns("suj_der_Noms")
            Me.columnsuj_der_DatosNacimiento = MyBase.Columns("suj_der_DatosNacimiento")
            Me.columnsuj_der_Edad = MyBase.Columns("suj_der_Edad")
            Me.columnsuj_der_Ocupacion = MyBase.Columns("suj_der_Ocupacion")
            Me.columnsuj_der_genero = MyBase.Columns("suj_der_genero")
            Me.columnsuj_der_EstadoCivil = MyBase.Columns("suj_der_EstadoCivil")
            Me.columnsuj_der_Domicilio = MyBase.Columns("suj_der_Domicilio")
            Me.columnmetodologia = MyBase.Columns("metodologia")
            Me.columnsitVivienda = MyBase.Columns("sitVivienda")
            Me.columnentrevistaRealizada = MyBase.Columns("entrevistaRealizada")
            Me.columnaccionesRealizadas = MyBase.Columns("accionesRealizadas")
            Me.columnrecomendaciones = MyBase.Columns("recomendaciones")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columndemandado = New Global.System.Data.DataColumn("demandado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndemandado)
            Me.columninfCodigo = New Global.System.Data.DataColumn("infCodigo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninfCodigo)
            Me.columnunidadJudicial = New Global.System.Data.DataColumn("unidadJudicial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunidadJudicial)
            Me.columnjuez = New Global.System.Data.DataColumn("juez", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjuez)
            Me.columninfSol = New Global.System.Data.DataColumn("infSol", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninfSol)
            Me.columnnumCausa = New Global.System.Data.DataColumn("numCausa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnumCausa)
            Me.columnaccion = New Global.System.Data.DataColumn("accion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaccion)
            Me.columnsuj_der_Noms = New Global.System.Data.DataColumn("suj_der_Noms", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsuj_der_Noms)
            Me.columnsuj_der_DatosNacimiento = New Global.System.Data.DataColumn("suj_der_DatosNacimiento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsuj_der_DatosNacimiento)
            Me.columnsuj_der_Edad = New Global.System.Data.DataColumn("suj_der_Edad", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsuj_der_Edad)
            Me.columnsuj_der_Ocupacion = New Global.System.Data.DataColumn("suj_der_Ocupacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsuj_der_Ocupacion)
            Me.columnsuj_der_genero = New Global.System.Data.DataColumn("suj_der_genero", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsuj_der_genero)
            Me.columnsuj_der_EstadoCivil = New Global.System.Data.DataColumn("suj_der_EstadoCivil", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsuj_der_EstadoCivil)
            Me.columnsuj_der_Domicilio = New Global.System.Data.DataColumn("suj_der_Domicilio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsuj_der_Domicilio)
            Me.columnmetodologia = New Global.System.Data.DataColumn("metodologia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmetodologia)
            Me.columnsitVivienda = New Global.System.Data.DataColumn("sitVivienda", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsitVivienda)
            Me.columnentrevistaRealizada = New Global.System.Data.DataColumn("entrevistaRealizada", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnentrevistaRealizada)
            Me.columnaccionesRealizadas = New Global.System.Data.DataColumn("accionesRealizadas", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaccionesRealizadas)
            Me.columnrecomendaciones = New Global.System.Data.DataColumn("recomendaciones", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrecomendaciones)
            Me.columndemandado.ReadOnly = true
            Me.columndemandado.MaxLength = 241
            Me.columninfCodigo.ReadOnly = true
            Me.columnunidadJudicial.MaxLength = 250
            Me.columnjuez.MaxLength = 120
            Me.columninfSol.MaxLength = 60
            Me.columnnumCausa.MaxLength = 15
            Me.columnaccion.MaxLength = 100
            Me.columnsuj_der_Noms.ReadOnly = true
            Me.columnsuj_der_Noms.MaxLength = 241
            Me.columnsuj_der_DatosNacimiento.ReadOnly = true
            Me.columnsuj_der_DatosNacimiento.MaxLength = 34
            Me.columnsuj_der_Ocupacion.MaxLength = 240
            Me.columnsuj_der_genero.MaxLength = 12
            Me.columnsuj_der_EstadoCivil.MaxLength = 25
            Me.columnsuj_der_Domicilio.MaxLength = 240
            Me.columnmetodologia.MaxLength = 1000
            Me.columnsitVivienda.MaxLength = 1000
            Me.columnentrevistaRealizada.MaxLength = 1000
            Me.columnaccionesRealizadas.MaxLength = 1000
            Me.columnrecomendaciones.MaxLength = 1000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVISTAINFORMEUNICORow() As VISTAINFORMEUNICORow
            Return CType(Me.NewRow,VISTAINFORMEUNICORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VISTAINFORMEUNICORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VISTAINFORMEUNICORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VISTAINFORMEUNICORowChangedEvent) Is Nothing) Then
                RaiseEvent VISTAINFORMEUNICORowChanged(Me, New VISTAINFORMEUNICORowChangeEvent(CType(e.Row,VISTAINFORMEUNICORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VISTAINFORMEUNICORowChangingEvent) Is Nothing) Then
                RaiseEvent VISTAINFORMEUNICORowChanging(Me, New VISTAINFORMEUNICORowChangeEvent(CType(e.Row,VISTAINFORMEUNICORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VISTAINFORMEUNICORowDeletedEvent) Is Nothing) Then
                RaiseEvent VISTAINFORMEUNICORowDeleted(Me, New VISTAINFORMEUNICORowChangeEvent(CType(e.Row,VISTAINFORMEUNICORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VISTAINFORMEUNICORowDeletingEvent) Is Nothing) Then
                RaiseEvent VISTAINFORMEUNICORowDeleting(Me, New VISTAINFORMEUNICORowChangeEvent(CType(e.Row,VISTAINFORMEUNICORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVISTAINFORMEUNICORow(ByVal row As VISTAINFORMEUNICORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As informeUnicoDS = New informeUnicoDS
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VISTAINFORMEUNICODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class INFORMANTESDataTable
        Inherits Global.System.Data.TypedTableBase(Of INFORMANTESRow)
        
        Private columninf_dir_Noms As Global.System.Data.DataColumn
        
        Private columninf_dir_parentezco As Global.System.Data.DataColumn
        
        Private columninf_dir_Edad As Global.System.Data.DataColumn
        
        Private columninf_dir_Ocupacion As Global.System.Data.DataColumn
        
        Private columninf_dir_genero As Global.System.Data.DataColumn
        
        Private columninf_dir_EstadoCivil As Global.System.Data.DataColumn
        
        Private columninf_dir_ci As Global.System.Data.DataColumn
        
        Private columninf_dir_telf As Global.System.Data.DataColumn
        
        Private columnnivInstruccion As Global.System.Data.DataColumn
        
        Private columnnivIngresos As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "INFORMANTES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property inf_dir_NomsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninf_dir_Noms
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property inf_dir_parentezcoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninf_dir_parentezco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property inf_dir_EdadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninf_dir_Edad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property inf_dir_OcupacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninf_dir_Ocupacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property inf_dir_generoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninf_dir_genero
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property inf_dir_EstadoCivilColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninf_dir_EstadoCivil
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property inf_dir_ciColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninf_dir_ci
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property inf_dir_telfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninf_dir_telf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nivInstruccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnivInstruccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nivIngresosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnivIngresos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As INFORMANTESRow
            Get
                Return CType(Me.Rows(index),INFORMANTESRow)
            End Get
        End Property
        
        Public Event INFORMANTESRowChanging As INFORMANTESRowChangeEventHandler
        
        Public Event INFORMANTESRowChanged As INFORMANTESRowChangeEventHandler
        
        Public Event INFORMANTESRowDeleting As INFORMANTESRowChangeEventHandler
        
        Public Event INFORMANTESRowDeleted As INFORMANTESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddINFORMANTESRow(ByVal row As INFORMANTESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddINFORMANTESRow(ByVal inf_dir_Noms As String, ByVal inf_dir_parentezco As String, ByVal inf_dir_Edad As Integer, ByVal inf_dir_Ocupacion As String, ByVal inf_dir_genero As String, ByVal inf_dir_EstadoCivil As String, ByVal inf_dir_ci As String, ByVal inf_dir_telf As String, ByVal nivInstruccion As String, ByVal nivIngresos As String) As INFORMANTESRow
            Dim rowINFORMANTESRow As INFORMANTESRow = CType(Me.NewRow,INFORMANTESRow)
            Dim columnValuesArray() As Object = New Object() {inf_dir_Noms, inf_dir_parentezco, inf_dir_Edad, inf_dir_Ocupacion, inf_dir_genero, inf_dir_EstadoCivil, inf_dir_ci, inf_dir_telf, nivInstruccion, nivIngresos}
            rowINFORMANTESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowINFORMANTESRow)
            Return rowINFORMANTESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As INFORMANTESDataTable = CType(MyBase.Clone,INFORMANTESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New INFORMANTESDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columninf_dir_Noms = MyBase.Columns("inf_dir_Noms")
            Me.columninf_dir_parentezco = MyBase.Columns("inf_dir_parentezco")
            Me.columninf_dir_Edad = MyBase.Columns("inf_dir_Edad")
            Me.columninf_dir_Ocupacion = MyBase.Columns("inf_dir_Ocupacion")
            Me.columninf_dir_genero = MyBase.Columns("inf_dir_genero")
            Me.columninf_dir_EstadoCivil = MyBase.Columns("inf_dir_EstadoCivil")
            Me.columninf_dir_ci = MyBase.Columns("inf_dir_ci")
            Me.columninf_dir_telf = MyBase.Columns("inf_dir_telf")
            Me.columnnivInstruccion = MyBase.Columns("nivInstruccion")
            Me.columnnivIngresos = MyBase.Columns("nivIngresos")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columninf_dir_Noms = New Global.System.Data.DataColumn("inf_dir_Noms", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninf_dir_Noms)
            Me.columninf_dir_parentezco = New Global.System.Data.DataColumn("inf_dir_parentezco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninf_dir_parentezco)
            Me.columninf_dir_Edad = New Global.System.Data.DataColumn("inf_dir_Edad", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninf_dir_Edad)
            Me.columninf_dir_Ocupacion = New Global.System.Data.DataColumn("inf_dir_Ocupacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninf_dir_Ocupacion)
            Me.columninf_dir_genero = New Global.System.Data.DataColumn("inf_dir_genero", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninf_dir_genero)
            Me.columninf_dir_EstadoCivil = New Global.System.Data.DataColumn("inf_dir_EstadoCivil", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninf_dir_EstadoCivil)
            Me.columninf_dir_ci = New Global.System.Data.DataColumn("inf_dir_ci", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninf_dir_ci)
            Me.columninf_dir_telf = New Global.System.Data.DataColumn("inf_dir_telf", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninf_dir_telf)
            Me.columnnivInstruccion = New Global.System.Data.DataColumn("nivInstruccion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnivInstruccion)
            Me.columnnivIngresos = New Global.System.Data.DataColumn("nivIngresos", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnivIngresos)
            Me.columninf_dir_Noms.ReadOnly = true
            Me.columninf_dir_Noms.MaxLength = 241
            Me.columninf_dir_parentezco.MaxLength = 120
            Me.columninf_dir_Ocupacion.MaxLength = 240
            Me.columninf_dir_genero.MaxLength = 12
            Me.columninf_dir_EstadoCivil.MaxLength = 25
            Me.columninf_dir_ci.MaxLength = 15
            Me.columninf_dir_telf.MaxLength = 20
            Me.columnnivInstruccion.MaxLength = 120
            Me.columnnivIngresos.MaxLength = 120
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewINFORMANTESRow() As INFORMANTESRow
            Return CType(Me.NewRow,INFORMANTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New INFORMANTESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(INFORMANTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.INFORMANTESRowChangedEvent) Is Nothing) Then
                RaiseEvent INFORMANTESRowChanged(Me, New INFORMANTESRowChangeEvent(CType(e.Row,INFORMANTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.INFORMANTESRowChangingEvent) Is Nothing) Then
                RaiseEvent INFORMANTESRowChanging(Me, New INFORMANTESRowChangeEvent(CType(e.Row,INFORMANTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.INFORMANTESRowDeletedEvent) Is Nothing) Then
                RaiseEvent INFORMANTESRowDeleted(Me, New INFORMANTESRowChangeEvent(CType(e.Row,INFORMANTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.INFORMANTESRowDeletingEvent) Is Nothing) Then
                RaiseEvent INFORMANTESRowDeleting(Me, New INFORMANTESRowChangeEvent(CType(e.Row,INFORMANTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveINFORMANTESRow(ByVal row As INFORMANTESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As informeUnicoDS = New informeUnicoDS
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "INFORMANTESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VISTA_REP_GRUPO_FAMILIARDataTable
        Inherits Global.System.Data.TypedTableBase(Of VISTA_REP_GRUPO_FAMILIARRow)
        
        Private columninforme As Global.System.Data.DataColumn
        
        Private columnnombres As Global.System.Data.DataColumn
        
        Private columnrelacion As Global.System.Data.DataColumn
        
        Private columnper_Edad As Global.System.Data.DataColumn
        
        Private columnper_Ocupacion As Global.System.Data.DataColumn
        
        Private columnper_genero As Global.System.Data.DataColumn
        
        Private columnper_EstadoCivil As Global.System.Data.DataColumn
        
        Private columnper_ci As Global.System.Data.DataColumn
        
        Private columnper_telf As Global.System.Data.DataColumn
        
        Private columnnivInstruccion As Global.System.Data.DataColumn
        
        Private columnnivIngresos As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VISTA_REP_GRUPO_FAMILIAR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property informeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninforme
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombresColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnombres
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property relacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrelacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property per_EdadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnper_Edad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property per_OcupacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnper_Ocupacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property per_generoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnper_genero
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property per_EstadoCivilColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnper_EstadoCivil
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property per_ciColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnper_ci
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property per_telfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnper_telf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nivInstruccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnivInstruccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nivIngresosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnivIngresos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VISTA_REP_GRUPO_FAMILIARRow
            Get
                Return CType(Me.Rows(index),VISTA_REP_GRUPO_FAMILIARRow)
            End Get
        End Property
        
        Public Event VISTA_REP_GRUPO_FAMILIARRowChanging As VISTA_REP_GRUPO_FAMILIARRowChangeEventHandler
        
        Public Event VISTA_REP_GRUPO_FAMILIARRowChanged As VISTA_REP_GRUPO_FAMILIARRowChangeEventHandler
        
        Public Event VISTA_REP_GRUPO_FAMILIARRowDeleting As VISTA_REP_GRUPO_FAMILIARRowChangeEventHandler
        
        Public Event VISTA_REP_GRUPO_FAMILIARRowDeleted As VISTA_REP_GRUPO_FAMILIARRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVISTA_REP_GRUPO_FAMILIARRow(ByVal row As VISTA_REP_GRUPO_FAMILIARRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVISTA_REP_GRUPO_FAMILIARRow(ByVal informe As Integer, ByVal nombres As String, ByVal relacion As String, ByVal per_Edad As Integer, ByVal per_Ocupacion As String, ByVal per_genero As String, ByVal per_EstadoCivil As String, ByVal per_ci As String, ByVal per_telf As String, ByVal nivInstruccion As String, ByVal nivIngresos As String) As VISTA_REP_GRUPO_FAMILIARRow
            Dim rowVISTA_REP_GRUPO_FAMILIARRow As VISTA_REP_GRUPO_FAMILIARRow = CType(Me.NewRow,VISTA_REP_GRUPO_FAMILIARRow)
            Dim columnValuesArray() As Object = New Object() {informe, nombres, relacion, per_Edad, per_Ocupacion, per_genero, per_EstadoCivil, per_ci, per_telf, nivInstruccion, nivIngresos}
            rowVISTA_REP_GRUPO_FAMILIARRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVISTA_REP_GRUPO_FAMILIARRow)
            Return rowVISTA_REP_GRUPO_FAMILIARRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VISTA_REP_GRUPO_FAMILIARDataTable = CType(MyBase.Clone,VISTA_REP_GRUPO_FAMILIARDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VISTA_REP_GRUPO_FAMILIARDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columninforme = MyBase.Columns("informe")
            Me.columnnombres = MyBase.Columns("nombres")
            Me.columnrelacion = MyBase.Columns("relacion")
            Me.columnper_Edad = MyBase.Columns("per_Edad")
            Me.columnper_Ocupacion = MyBase.Columns("per_Ocupacion")
            Me.columnper_genero = MyBase.Columns("per_genero")
            Me.columnper_EstadoCivil = MyBase.Columns("per_EstadoCivil")
            Me.columnper_ci = MyBase.Columns("per_ci")
            Me.columnper_telf = MyBase.Columns("per_telf")
            Me.columnnivInstruccion = MyBase.Columns("nivInstruccion")
            Me.columnnivIngresos = MyBase.Columns("nivIngresos")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columninforme = New Global.System.Data.DataColumn("informe", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninforme)
            Me.columnnombres = New Global.System.Data.DataColumn("nombres", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombres)
            Me.columnrelacion = New Global.System.Data.DataColumn("relacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrelacion)
            Me.columnper_Edad = New Global.System.Data.DataColumn("per_Edad", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnper_Edad)
            Me.columnper_Ocupacion = New Global.System.Data.DataColumn("per_Ocupacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnper_Ocupacion)
            Me.columnper_genero = New Global.System.Data.DataColumn("per_genero", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnper_genero)
            Me.columnper_EstadoCivil = New Global.System.Data.DataColumn("per_EstadoCivil", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnper_EstadoCivil)
            Me.columnper_ci = New Global.System.Data.DataColumn("per_ci", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnper_ci)
            Me.columnper_telf = New Global.System.Data.DataColumn("per_telf", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnper_telf)
            Me.columnnivInstruccion = New Global.System.Data.DataColumn("nivInstruccion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnivInstruccion)
            Me.columnnivIngresos = New Global.System.Data.DataColumn("nivIngresos", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnivIngresos)
            Me.columninforme.ReadOnly = true
            Me.columnnombres.ReadOnly = true
            Me.columnnombres.MaxLength = 241
            Me.columnrelacion.MaxLength = 50
            Me.columnper_Ocupacion.MaxLength = 240
            Me.columnper_genero.MaxLength = 12
            Me.columnper_EstadoCivil.MaxLength = 25
            Me.columnper_ci.MaxLength = 15
            Me.columnper_telf.MaxLength = 20
            Me.columnnivInstruccion.MaxLength = 120
            Me.columnnivIngresos.MaxLength = 120
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVISTA_REP_GRUPO_FAMILIARRow() As VISTA_REP_GRUPO_FAMILIARRow
            Return CType(Me.NewRow,VISTA_REP_GRUPO_FAMILIARRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VISTA_REP_GRUPO_FAMILIARRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VISTA_REP_GRUPO_FAMILIARRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VISTA_REP_GRUPO_FAMILIARRowChangedEvent) Is Nothing) Then
                RaiseEvent VISTA_REP_GRUPO_FAMILIARRowChanged(Me, New VISTA_REP_GRUPO_FAMILIARRowChangeEvent(CType(e.Row,VISTA_REP_GRUPO_FAMILIARRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VISTA_REP_GRUPO_FAMILIARRowChangingEvent) Is Nothing) Then
                RaiseEvent VISTA_REP_GRUPO_FAMILIARRowChanging(Me, New VISTA_REP_GRUPO_FAMILIARRowChangeEvent(CType(e.Row,VISTA_REP_GRUPO_FAMILIARRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VISTA_REP_GRUPO_FAMILIARRowDeletedEvent) Is Nothing) Then
                RaiseEvent VISTA_REP_GRUPO_FAMILIARRowDeleted(Me, New VISTA_REP_GRUPO_FAMILIARRowChangeEvent(CType(e.Row,VISTA_REP_GRUPO_FAMILIARRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VISTA_REP_GRUPO_FAMILIARRowDeletingEvent) Is Nothing) Then
                RaiseEvent VISTA_REP_GRUPO_FAMILIARRowDeleting(Me, New VISTA_REP_GRUPO_FAMILIARRowChangeEvent(CType(e.Row,VISTA_REP_GRUPO_FAMILIARRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVISTA_REP_GRUPO_FAMILIARRow(ByVal row As VISTA_REP_GRUPO_FAMILIARRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As informeUnicoDS = New informeUnicoDS
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VISTA_REP_GRUPO_FAMILIARDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VISTAINFORMEUNICORow
        Inherits Global.System.Data.DataRow
        
        Private tableVISTAINFORMEUNICO As VISTAINFORMEUNICODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVISTAINFORMEUNICO = CType(Me.Table,VISTAINFORMEUNICODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property demandado() As String
            Get
                Try 
                    Return CType(Me(Me.tableVISTAINFORMEUNICO.demandadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'demandado' de la tabla 'VISTAINFORMEUNICO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVISTAINFORMEUNICO.demandadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property infCodigo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVISTAINFORMEUNICO.infCodigoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'infCodigo' de la tabla 'VISTAINFORMEUNICO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVISTAINFORMEUNICO.infCodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unidadJudicial() As String
            Get
                Try 
                    Return CType(Me(Me.tableVISTAINFORMEUNICO.unidadJudicialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'unidadJudicial' de la tabla 'VISTAINFORMEUNICO' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVISTAINFORMEUNICO.unidadJudicialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property juez() As String
            Get
                Try 
                    Return CType(Me(Me.tableVISTAINFORMEUNICO.juezColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'juez' de la tabla 'VISTAINFORMEUNICO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVISTAINFORMEUNICO.juezColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property infSol() As String
            Get
                Try 
                    Return CType(Me(Me.tableVISTAINFORMEUNICO.infSolColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'infSol' de la tabla 'VISTAINFORMEUNICO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVISTAINFORMEUNICO.infSolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property numCausa() As String
            Get
                Try 
                    Return CType(Me(Me.tableVISTAINFORMEUNICO.numCausaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'numCausa' de la tabla 'VISTAINFORMEUNICO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVISTAINFORMEUNICO.numCausaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property accion() As String
            Get
                Try 
                    Return CType(Me(Me.tableVISTAINFORMEUNICO.accionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'accion' de la tabla 'VISTAINFORMEUNICO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVISTAINFORMEUNICO.accionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property suj_der_Noms() As String
            Get
                Try 
                    Return CType(Me(Me.tableVISTAINFORMEUNICO.suj_der_NomsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'suj_der_Noms' de la tabla 'VISTAINFORMEUNICO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVISTAINFORMEUNICO.suj_der_NomsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property suj_der_DatosNacimiento() As String
            Get
                Try 
                    Return CType(Me(Me.tableVISTAINFORMEUNICO.suj_der_DatosNacimientoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'suj_der_DatosNacimiento' de la tabla 'VISTAINFORMEUNICO' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVISTAINFORMEUNICO.suj_der_DatosNacimientoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property suj_der_Edad() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVISTAINFORMEUNICO.suj_der_EdadColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'suj_der_Edad' de la tabla 'VISTAINFORMEUNICO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVISTAINFORMEUNICO.suj_der_EdadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property suj_der_Ocupacion() As String
            Get
                Try 
                    Return CType(Me(Me.tableVISTAINFORMEUNICO.suj_der_OcupacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'suj_der_Ocupacion' de la tabla 'VISTAINFORMEUNICO' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVISTAINFORMEUNICO.suj_der_OcupacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property suj_der_genero() As String
            Get
                Try 
                    Return CType(Me(Me.tableVISTAINFORMEUNICO.suj_der_generoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'suj_der_genero' de la tabla 'VISTAINFORMEUNICO' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVISTAINFORMEUNICO.suj_der_generoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property suj_der_EstadoCivil() As String
            Get
                Try 
                    Return CType(Me(Me.tableVISTAINFORMEUNICO.suj_der_EstadoCivilColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'suj_der_EstadoCivil' de la tabla 'VISTAINFORMEUNICO' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVISTAINFORMEUNICO.suj_der_EstadoCivilColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property suj_der_Domicilio() As String
            Get
                Try 
                    Return CType(Me(Me.tableVISTAINFORMEUNICO.suj_der_DomicilioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'suj_der_Domicilio' de la tabla 'VISTAINFORMEUNICO' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVISTAINFORMEUNICO.suj_der_DomicilioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property metodologia() As String
            Get
                Try 
                    Return CType(Me(Me.tableVISTAINFORMEUNICO.metodologiaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'metodologia' de la tabla 'VISTAINFORMEUNICO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVISTAINFORMEUNICO.metodologiaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sitVivienda() As String
            Get
                Try 
                    Return CType(Me(Me.tableVISTAINFORMEUNICO.sitViviendaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'sitVivienda' de la tabla 'VISTAINFORMEUNICO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVISTAINFORMEUNICO.sitViviendaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property entrevistaRealizada() As String
            Get
                Try 
                    Return CType(Me(Me.tableVISTAINFORMEUNICO.entrevistaRealizadaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'entrevistaRealizada' de la tabla 'VISTAINFORMEUNICO' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVISTAINFORMEUNICO.entrevistaRealizadaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property accionesRealizadas() As String
            Get
                Try 
                    Return CType(Me(Me.tableVISTAINFORMEUNICO.accionesRealizadasColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'accionesRealizadas' de la tabla 'VISTAINFORMEUNICO' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableVISTAINFORMEUNICO.accionesRealizadasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property recomendaciones() As String
            Get
                Try 
                    Return CType(Me(Me.tableVISTAINFORMEUNICO.recomendacionesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'recomendaciones' de la tabla 'VISTAINFORMEUNICO' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVISTAINFORMEUNICO.recomendacionesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdemandadoNull() As Boolean
            Return Me.IsNull(Me.tableVISTAINFORMEUNICO.demandadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdemandadoNull()
            Me(Me.tableVISTAINFORMEUNICO.demandadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsinfCodigoNull() As Boolean
            Return Me.IsNull(Me.tableVISTAINFORMEUNICO.infCodigoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetinfCodigoNull()
            Me(Me.tableVISTAINFORMEUNICO.infCodigoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsunidadJudicialNull() As Boolean
            Return Me.IsNull(Me.tableVISTAINFORMEUNICO.unidadJudicialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetunidadJudicialNull()
            Me(Me.tableVISTAINFORMEUNICO.unidadJudicialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsjuezNull() As Boolean
            Return Me.IsNull(Me.tableVISTAINFORMEUNICO.juezColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetjuezNull()
            Me(Me.tableVISTAINFORMEUNICO.juezColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsinfSolNull() As Boolean
            Return Me.IsNull(Me.tableVISTAINFORMEUNICO.infSolColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetinfSolNull()
            Me(Me.tableVISTAINFORMEUNICO.infSolColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnumCausaNull() As Boolean
            Return Me.IsNull(Me.tableVISTAINFORMEUNICO.numCausaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnumCausaNull()
            Me(Me.tableVISTAINFORMEUNICO.numCausaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsaccionNull() As Boolean
            Return Me.IsNull(Me.tableVISTAINFORMEUNICO.accionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetaccionNull()
            Me(Me.tableVISTAINFORMEUNICO.accionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issuj_der_NomsNull() As Boolean
            Return Me.IsNull(Me.tableVISTAINFORMEUNICO.suj_der_NomsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsuj_der_NomsNull()
            Me(Me.tableVISTAINFORMEUNICO.suj_der_NomsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issuj_der_DatosNacimientoNull() As Boolean
            Return Me.IsNull(Me.tableVISTAINFORMEUNICO.suj_der_DatosNacimientoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsuj_der_DatosNacimientoNull()
            Me(Me.tableVISTAINFORMEUNICO.suj_der_DatosNacimientoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issuj_der_EdadNull() As Boolean
            Return Me.IsNull(Me.tableVISTAINFORMEUNICO.suj_der_EdadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsuj_der_EdadNull()
            Me(Me.tableVISTAINFORMEUNICO.suj_der_EdadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issuj_der_OcupacionNull() As Boolean
            Return Me.IsNull(Me.tableVISTAINFORMEUNICO.suj_der_OcupacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsuj_der_OcupacionNull()
            Me(Me.tableVISTAINFORMEUNICO.suj_der_OcupacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issuj_der_generoNull() As Boolean
            Return Me.IsNull(Me.tableVISTAINFORMEUNICO.suj_der_generoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsuj_der_generoNull()
            Me(Me.tableVISTAINFORMEUNICO.suj_der_generoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issuj_der_EstadoCivilNull() As Boolean
            Return Me.IsNull(Me.tableVISTAINFORMEUNICO.suj_der_EstadoCivilColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsuj_der_EstadoCivilNull()
            Me(Me.tableVISTAINFORMEUNICO.suj_der_EstadoCivilColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issuj_der_DomicilioNull() As Boolean
            Return Me.IsNull(Me.tableVISTAINFORMEUNICO.suj_der_DomicilioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsuj_der_DomicilioNull()
            Me(Me.tableVISTAINFORMEUNICO.suj_der_DomicilioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmetodologiaNull() As Boolean
            Return Me.IsNull(Me.tableVISTAINFORMEUNICO.metodologiaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmetodologiaNull()
            Me(Me.tableVISTAINFORMEUNICO.metodologiaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssitViviendaNull() As Boolean
            Return Me.IsNull(Me.tableVISTAINFORMEUNICO.sitViviendaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsitViviendaNull()
            Me(Me.tableVISTAINFORMEUNICO.sitViviendaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsentrevistaRealizadaNull() As Boolean
            Return Me.IsNull(Me.tableVISTAINFORMEUNICO.entrevistaRealizadaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetentrevistaRealizadaNull()
            Me(Me.tableVISTAINFORMEUNICO.entrevistaRealizadaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsaccionesRealizadasNull() As Boolean
            Return Me.IsNull(Me.tableVISTAINFORMEUNICO.accionesRealizadasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetaccionesRealizadasNull()
            Me(Me.tableVISTAINFORMEUNICO.accionesRealizadasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrecomendacionesNull() As Boolean
            Return Me.IsNull(Me.tableVISTAINFORMEUNICO.recomendacionesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrecomendacionesNull()
            Me(Me.tableVISTAINFORMEUNICO.recomendacionesColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class INFORMANTESRow
        Inherits Global.System.Data.DataRow
        
        Private tableINFORMANTES As INFORMANTESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableINFORMANTES = CType(Me.Table,INFORMANTESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property inf_dir_Noms() As String
            Get
                Try 
                    Return CType(Me(Me.tableINFORMANTES.inf_dir_NomsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'inf_dir_Noms' de la tabla 'INFORMANTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINFORMANTES.inf_dir_NomsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property inf_dir_parentezco() As String
            Get
                Try 
                    Return CType(Me(Me.tableINFORMANTES.inf_dir_parentezcoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'inf_dir_parentezco' de la tabla 'INFORMANTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINFORMANTES.inf_dir_parentezcoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property inf_dir_Edad() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINFORMANTES.inf_dir_EdadColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'inf_dir_Edad' de la tabla 'INFORMANTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINFORMANTES.inf_dir_EdadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property inf_dir_Ocupacion() As String
            Get
                Try 
                    Return CType(Me(Me.tableINFORMANTES.inf_dir_OcupacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'inf_dir_Ocupacion' de la tabla 'INFORMANTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINFORMANTES.inf_dir_OcupacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property inf_dir_genero() As String
            Get
                Try 
                    Return CType(Me(Me.tableINFORMANTES.inf_dir_generoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'inf_dir_genero' de la tabla 'INFORMANTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINFORMANTES.inf_dir_generoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property inf_dir_EstadoCivil() As String
            Get
                Try 
                    Return CType(Me(Me.tableINFORMANTES.inf_dir_EstadoCivilColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'inf_dir_EstadoCivil' de la tabla 'INFORMANTES' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableINFORMANTES.inf_dir_EstadoCivilColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property inf_dir_ci() As String
            Get
                Try 
                    Return CType(Me(Me.tableINFORMANTES.inf_dir_ciColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'inf_dir_ci' de la tabla 'INFORMANTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINFORMANTES.inf_dir_ciColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property inf_dir_telf() As String
            Get
                Try 
                    Return CType(Me(Me.tableINFORMANTES.inf_dir_telfColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'inf_dir_telf' de la tabla 'INFORMANTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINFORMANTES.inf_dir_telfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nivInstruccion() As String
            Get
                Try 
                    Return CType(Me(Me.tableINFORMANTES.nivInstruccionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nivInstruccion' de la tabla 'INFORMANTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINFORMANTES.nivInstruccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nivIngresos() As String
            Get
                Try 
                    Return CType(Me(Me.tableINFORMANTES.nivIngresosColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nivIngresos' de la tabla 'INFORMANTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINFORMANTES.nivIngresosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isinf_dir_NomsNull() As Boolean
            Return Me.IsNull(Me.tableINFORMANTES.inf_dir_NomsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setinf_dir_NomsNull()
            Me(Me.tableINFORMANTES.inf_dir_NomsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isinf_dir_parentezcoNull() As Boolean
            Return Me.IsNull(Me.tableINFORMANTES.inf_dir_parentezcoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setinf_dir_parentezcoNull()
            Me(Me.tableINFORMANTES.inf_dir_parentezcoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isinf_dir_EdadNull() As Boolean
            Return Me.IsNull(Me.tableINFORMANTES.inf_dir_EdadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setinf_dir_EdadNull()
            Me(Me.tableINFORMANTES.inf_dir_EdadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isinf_dir_OcupacionNull() As Boolean
            Return Me.IsNull(Me.tableINFORMANTES.inf_dir_OcupacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setinf_dir_OcupacionNull()
            Me(Me.tableINFORMANTES.inf_dir_OcupacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isinf_dir_generoNull() As Boolean
            Return Me.IsNull(Me.tableINFORMANTES.inf_dir_generoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setinf_dir_generoNull()
            Me(Me.tableINFORMANTES.inf_dir_generoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isinf_dir_EstadoCivilNull() As Boolean
            Return Me.IsNull(Me.tableINFORMANTES.inf_dir_EstadoCivilColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setinf_dir_EstadoCivilNull()
            Me(Me.tableINFORMANTES.inf_dir_EstadoCivilColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isinf_dir_ciNull() As Boolean
            Return Me.IsNull(Me.tableINFORMANTES.inf_dir_ciColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setinf_dir_ciNull()
            Me(Me.tableINFORMANTES.inf_dir_ciColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isinf_dir_telfNull() As Boolean
            Return Me.IsNull(Me.tableINFORMANTES.inf_dir_telfColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setinf_dir_telfNull()
            Me(Me.tableINFORMANTES.inf_dir_telfColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnivInstruccionNull() As Boolean
            Return Me.IsNull(Me.tableINFORMANTES.nivInstruccionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnivInstruccionNull()
            Me(Me.tableINFORMANTES.nivInstruccionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnivIngresosNull() As Boolean
            Return Me.IsNull(Me.tableINFORMANTES.nivIngresosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnivIngresosNull()
            Me(Me.tableINFORMANTES.nivIngresosColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VISTA_REP_GRUPO_FAMILIARRow
        Inherits Global.System.Data.DataRow
        
        Private tableVISTA_REP_GRUPO_FAMILIAR As VISTA_REP_GRUPO_FAMILIARDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVISTA_REP_GRUPO_FAMILIAR = CType(Me.Table,VISTA_REP_GRUPO_FAMILIARDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property informe() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVISTA_REP_GRUPO_FAMILIAR.informeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'informe' de la tabla 'VISTA_REP_GRUPO_FAMILIAR' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVISTA_REP_GRUPO_FAMILIAR.informeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombres() As String
            Get
                Try 
                    Return CType(Me(Me.tableVISTA_REP_GRUPO_FAMILIAR.nombresColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nombres' de la tabla 'VISTA_REP_GRUPO_FAMILIAR' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVISTA_REP_GRUPO_FAMILIAR.nombresColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property relacion() As String
            Get
                Try 
                    Return CType(Me(Me.tableVISTA_REP_GRUPO_FAMILIAR.relacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'relacion' de la tabla 'VISTA_REP_GRUPO_FAMILIAR' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVISTA_REP_GRUPO_FAMILIAR.relacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property per_Edad() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVISTA_REP_GRUPO_FAMILIAR.per_EdadColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'per_Edad' de la tabla 'VISTA_REP_GRUPO_FAMILIAR' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVISTA_REP_GRUPO_FAMILIAR.per_EdadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property per_Ocupacion() As String
            Get
                Try 
                    Return CType(Me(Me.tableVISTA_REP_GRUPO_FAMILIAR.per_OcupacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'per_Ocupacion' de la tabla 'VISTA_REP_GRUPO_FAMILIAR' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVISTA_REP_GRUPO_FAMILIAR.per_OcupacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property per_genero() As String
            Get
                Try 
                    Return CType(Me(Me.tableVISTA_REP_GRUPO_FAMILIAR.per_generoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'per_genero' de la tabla 'VISTA_REP_GRUPO_FAMILIAR' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVISTA_REP_GRUPO_FAMILIAR.per_generoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property per_EstadoCivil() As String
            Get
                Try 
                    Return CType(Me(Me.tableVISTA_REP_GRUPO_FAMILIAR.per_EstadoCivilColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'per_EstadoCivil' de la tabla 'VISTA_REP_GRUPO_FAMILIAR' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVISTA_REP_GRUPO_FAMILIAR.per_EstadoCivilColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property per_ci() As String
            Get
                Try 
                    Return CType(Me(Me.tableVISTA_REP_GRUPO_FAMILIAR.per_ciColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'per_ci' de la tabla 'VISTA_REP_GRUPO_FAMILIAR' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVISTA_REP_GRUPO_FAMILIAR.per_ciColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property per_telf() As String
            Get
                Try 
                    Return CType(Me(Me.tableVISTA_REP_GRUPO_FAMILIAR.per_telfColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'per_telf' de la tabla 'VISTA_REP_GRUPO_FAMILIAR' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVISTA_REP_GRUPO_FAMILIAR.per_telfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nivInstruccion() As String
            Get
                Try 
                    Return CType(Me(Me.tableVISTA_REP_GRUPO_FAMILIAR.nivInstruccionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nivInstruccion' de la tabla 'VISTA_REP_GRUPO_FAMILIAR' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVISTA_REP_GRUPO_FAMILIAR.nivInstruccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nivIngresos() As String
            Get
                Try 
                    Return CType(Me(Me.tableVISTA_REP_GRUPO_FAMILIAR.nivIngresosColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nivIngresos' de la tabla 'VISTA_REP_GRUPO_FAMILIAR' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableVISTA_REP_GRUPO_FAMILIAR.nivIngresosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsinformeNull() As Boolean
            Return Me.IsNull(Me.tableVISTA_REP_GRUPO_FAMILIAR.informeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetinformeNull()
            Me(Me.tableVISTA_REP_GRUPO_FAMILIAR.informeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnombresNull() As Boolean
            Return Me.IsNull(Me.tableVISTA_REP_GRUPO_FAMILIAR.nombresColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnombresNull()
            Me(Me.tableVISTA_REP_GRUPO_FAMILIAR.nombresColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrelacionNull() As Boolean
            Return Me.IsNull(Me.tableVISTA_REP_GRUPO_FAMILIAR.relacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrelacionNull()
            Me(Me.tableVISTA_REP_GRUPO_FAMILIAR.relacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isper_EdadNull() As Boolean
            Return Me.IsNull(Me.tableVISTA_REP_GRUPO_FAMILIAR.per_EdadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setper_EdadNull()
            Me(Me.tableVISTA_REP_GRUPO_FAMILIAR.per_EdadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isper_OcupacionNull() As Boolean
            Return Me.IsNull(Me.tableVISTA_REP_GRUPO_FAMILIAR.per_OcupacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setper_OcupacionNull()
            Me(Me.tableVISTA_REP_GRUPO_FAMILIAR.per_OcupacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isper_generoNull() As Boolean
            Return Me.IsNull(Me.tableVISTA_REP_GRUPO_FAMILIAR.per_generoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setper_generoNull()
            Me(Me.tableVISTA_REP_GRUPO_FAMILIAR.per_generoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isper_EstadoCivilNull() As Boolean
            Return Me.IsNull(Me.tableVISTA_REP_GRUPO_FAMILIAR.per_EstadoCivilColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setper_EstadoCivilNull()
            Me(Me.tableVISTA_REP_GRUPO_FAMILIAR.per_EstadoCivilColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isper_ciNull() As Boolean
            Return Me.IsNull(Me.tableVISTA_REP_GRUPO_FAMILIAR.per_ciColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setper_ciNull()
            Me(Me.tableVISTA_REP_GRUPO_FAMILIAR.per_ciColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isper_telfNull() As Boolean
            Return Me.IsNull(Me.tableVISTA_REP_GRUPO_FAMILIAR.per_telfColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setper_telfNull()
            Me(Me.tableVISTA_REP_GRUPO_FAMILIAR.per_telfColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnivInstruccionNull() As Boolean
            Return Me.IsNull(Me.tableVISTA_REP_GRUPO_FAMILIAR.nivInstruccionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnivInstruccionNull()
            Me(Me.tableVISTA_REP_GRUPO_FAMILIAR.nivInstruccionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnivIngresosNull() As Boolean
            Return Me.IsNull(Me.tableVISTA_REP_GRUPO_FAMILIAR.nivIngresosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnivIngresosNull()
            Me(Me.tableVISTA_REP_GRUPO_FAMILIAR.nivIngresosColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VISTAINFORMEUNICORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VISTAINFORMEUNICORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VISTAINFORMEUNICORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VISTAINFORMEUNICORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class INFORMANTESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As INFORMANTESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As INFORMANTESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As INFORMANTESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VISTA_REP_GRUPO_FAMILIARRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VISTA_REP_GRUPO_FAMILIARRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VISTA_REP_GRUPO_FAMILIARRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VISTA_REP_GRUPO_FAMILIARRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace informeUnicoDSTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VISTAINFORMEUNICOTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VISTAINFORMEUNICO"
            tableMapping.ColumnMappings.Add("demandado", "demandado")
            tableMapping.ColumnMappings.Add("infCodigo", "infCodigo")
            tableMapping.ColumnMappings.Add("unidadJudicial", "unidadJudicial")
            tableMapping.ColumnMappings.Add("juez", "juez")
            tableMapping.ColumnMappings.Add("infSol", "infSol")
            tableMapping.ColumnMappings.Add("numCausa", "numCausa")
            tableMapping.ColumnMappings.Add("accion", "accion")
            tableMapping.ColumnMappings.Add("suj_der_Noms", "suj_der_Noms")
            tableMapping.ColumnMappings.Add("suj_der_DatosNacimiento", "suj_der_DatosNacimiento")
            tableMapping.ColumnMappings.Add("suj_der_Edad", "suj_der_Edad")
            tableMapping.ColumnMappings.Add("suj_der_Ocupacion", "suj_der_Ocupacion")
            tableMapping.ColumnMappings.Add("suj_der_genero", "suj_der_genero")
            tableMapping.ColumnMappings.Add("suj_der_EstadoCivil", "suj_der_EstadoCivil")
            tableMapping.ColumnMappings.Add("suj_der_Domicilio", "suj_der_Domicilio")
            tableMapping.ColumnMappings.Add("metodologia", "metodologia")
            tableMapping.ColumnMappings.Add("sitVivienda", "sitVivienda")
            tableMapping.ColumnMappings.Add("entrevistaRealizada", "entrevistaRealizada")
            tableMapping.ColumnMappings.Add("accionesRealizadas", "accionesRealizadas")
            tableMapping.ColumnMappings.Add("recomendaciones", "recomendaciones")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SISOTEC.My.MySettings.Default.dbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT * FROM VISTAINFORMEUNICO WHERE (infCodigo = @infCodigo)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@infCodigo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "infCodigo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal infCodigo As Global.System.Nullable(Of Integer)) As informeUnicoDS.VISTAINFORMEUNICODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (infCodigo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(infCodigo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As informeUnicoDS.VISTAINFORMEUNICODataTable = New informeUnicoDS.VISTAINFORMEUNICODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class INFORMANTESTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "INFORMANTES"
            tableMapping.ColumnMappings.Add("inf_dir_Noms", "inf_dir_Noms")
            tableMapping.ColumnMappings.Add("inf_dir_parentezco", "inf_dir_parentezco")
            tableMapping.ColumnMappings.Add("inf_dir_Edad", "inf_dir_Edad")
            tableMapping.ColumnMappings.Add("inf_dir_Ocupacion", "inf_dir_Ocupacion")
            tableMapping.ColumnMappings.Add("inf_dir_genero", "inf_dir_genero")
            tableMapping.ColumnMappings.Add("inf_dir_EstadoCivil", "inf_dir_EstadoCivil")
            tableMapping.ColumnMappings.Add("inf_dir_ci", "inf_dir_ci")
            tableMapping.ColumnMappings.Add("inf_dir_telf", "inf_dir_telf")
            tableMapping.ColumnMappings.Add("nivInstruccion", "nivInstruccion")
            tableMapping.ColumnMappings.Add("nivIngresos", "nivIngresos")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SISOTEC.My.MySettings.Default.dbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"inf_dir.CEPERS_NOMBRE + ' ' + inf_dir.CEPERS_APELLI 'inf_dir_Noms',"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                " det_inf.CFDEIN_PARENT 'inf_dir_parentezco',"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    inf_dir.CEPERS_EDADXX 'inf_dir"& _ 
                "_Edad',"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    inf_dir.CEPERS_OCUPAC 'inf_dir_Ocupacion',"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    inf_dir.CEPERS_GENE"& _ 
                "RO 'inf_dir_genero',"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    inf_dir.CEPERS_ESTCIV 'inf_dir_EstadoCivil',"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    inf_"& _ 
                "dir.CEPERS_DOCIDE 'inf_dir_ci',"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    inf_dir.CEPERS_TELEFO 'inf_dir_telf',"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    "& _ 
                "inf_dir.CEPERS_NIVINS 'nivInstruccion',"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    inf_dir.CEPERS_NIVING 'nivIngresos'"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"dbo.CEPERS_PERSONA inf_dir join"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"dbo.DETALLE_INFORME det_inf on det_in"& _ 
                "f.CEPERS_CODIGO = inf_dir.CEPERS_CODIGO and det_inf.CFDEIN_ROLXXX = 'INFORMANTE "& _ 
                "DIRECTO'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"det_inf.CEINFO_CODIGO = @CEINFO_CODIGO "
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEINFO_CODIGO", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_CODIGO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "select"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"inf_dir.CEPERS_NOMBRE + ' ' + inf_dir.CEPERS_APELLI 'inf_dir_Noms',"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                " det_inf.CFDEIN_PARENT 'inf_dir_parentezco',"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    inf_dir.CEPERS_EDADXX 'inf_dir"& _ 
                "_Edad',"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    inf_dir.CEPERS_OCUPAC 'inf_dir_Ocupacion',"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    inf_dir.CEPERS_GENE"& _ 
                "RO 'inf_dir_genero',"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    inf_dir.CEPERS_ESTCIV 'inf_dir_EstadoCivil',"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    inf_"& _ 
                "dir.CEPERS_DOCIDE 'inf_dir_ci',"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    inf_dir.CEPERS_TELEFO 'inf_dir_telf',"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" inf"& _ 
                "_dir.CEPERS_NIVINS 'nivInstruccion',"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    inf_dir.CEPERS_NIVING 'nivIngresos'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"f"& _ 
                "rom"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"dbo.CEPERS_PERSONA inf_dir join"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"dbo.DETALLE_INFORME det_inf on det_inf.C"& _ 
                "EPERS_CODIGO = inf_dir.CEPERS_CODIGO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"det_inf.CEINFO_CODIGO = @CEINFO_CO"& _ 
                "DIGO and"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  det_inf.CFDEIN_PARENT in ('PADRE', 'HERMANO', 'TIO',"& _ 
                "'ABUELO','PRIMO')"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEINFO_CODIGO", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_CODIGO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "select"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"inf_dir.CEPERS_NOMBRE + ' ' + inf_dir.CEPERS_APELLI 'inf_dir_Noms',"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                " det_inf.CFDEIN_PARENT 'inf_dir_parentezco',"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    inf_dir.CEPERS_EDADXX 'inf_dir"& _ 
                "_Edad',"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    inf_dir.CEPERS_OCUPAC 'inf_dir_Ocupacion',"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    inf_dir.CEPERS_GENE"& _ 
                "RO 'inf_dir_genero',"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    inf_dir.CEPERS_ESTCIV 'inf_dir_EstadoCivil',"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    inf_"& _ 
                "dir.CEPERS_DOCIDE 'inf_dir_ci',"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    inf_dir.CEPERS_TELEFO 'inf_dir_telf',"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" inf"& _ 
                "_dir.CEPERS_NIVINS 'nivInstruccion',"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    inf_dir.CEPERS_NIVING 'nivIngresos'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"f"& _ 
                "rom"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"dbo.CEPERS_PERSONA inf_dir join"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"dbo.DETALLE_INFORME det_inf on det_inf.C"& _ 
                "EPERS_CODIGO = inf_dir.CEPERS_CODIGO and det_inf.CFDEIN_ROLXXX = 'INFORMANTE COL"& _ 
                "ATERAL'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"det_inf.CEINFO_CODIGO = @CEINFO_CODIGO "
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEINFO_CODIGO", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_CODIGO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetInfDirecto(ByVal CEINFO_CODIGO As Integer) As informeUnicoDS.INFORMANTESDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CEINFO_CODIGO,Integer)
            Dim dataTable As informeUnicoDS.INFORMANTESDataTable = New informeUnicoDS.INFORMANTESDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetAllInformantes(ByVal CEINFO_CODIGO As Integer) As informeUnicoDS.INFORMANTESDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CEINFO_CODIGO,Integer)
            Dim dataTable As informeUnicoDS.INFORMANTESDataTable = New informeUnicoDS.INFORMANTESDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetInfColateral(ByVal CEINFO_CODIGO As Integer) As informeUnicoDS.INFORMANTESDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CEINFO_CODIGO,Integer)
            Dim dataTable As informeUnicoDS.INFORMANTESDataTable = New informeUnicoDS.INFORMANTESDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VISTA_REP_GRUPO_FAMILIARTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VISTA_REP_GRUPO_FAMILIAR"
            tableMapping.ColumnMappings.Add("informe", "informe")
            tableMapping.ColumnMappings.Add("nombres", "nombres")
            tableMapping.ColumnMappings.Add("relacion", "relacion")
            tableMapping.ColumnMappings.Add("per_Edad", "per_Edad")
            tableMapping.ColumnMappings.Add("per_Ocupacion", "per_Ocupacion")
            tableMapping.ColumnMappings.Add("per_genero", "per_genero")
            tableMapping.ColumnMappings.Add("per_EstadoCivil", "per_EstadoCivil")
            tableMapping.ColumnMappings.Add("per_ci", "per_ci")
            tableMapping.ColumnMappings.Add("per_telf", "per_telf")
            tableMapping.ColumnMappings.Add("nivInstruccion", "nivInstruccion")
            tableMapping.ColumnMappings.Add("nivIngresos", "nivIngresos")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SISOTEC.My.MySettings.Default.dbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        informe, nombres, relacion, per_Edad, per_Ocupacion, per_genero, pe"& _ 
                "r_EstadoCivil, per_ci, per_telf, nivInstruccion, nivIngresos"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            VI"& _ 
                "STA_REP_GRUPO_FAMILIAR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (informe = @INFORME)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INFORME", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "informe", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal INFORME As Global.System.Nullable(Of Integer)) As informeUnicoDS.VISTA_REP_GRUPO_FAMILIARDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (INFORME.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(INFORME.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As informeUnicoDS.VISTA_REP_GRUPO_FAMILIARDataTable = New informeUnicoDS.VISTA_REP_GRUPO_FAMILIARDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As informeUnicoDS, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As informeUnicoDS, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As informeUnicoDS, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As informeUnicoDS) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager no contiene información de conexión. Establezca cada propieda"& _ 
                        "d TableAdapterManager TableAdapter en una instancia TableAdapter válida.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("La transacción no puede comenzar. La conexión de datos actual no es compatible co"& _ 
                        "n las transacciones o el estado actual no permite que comience la transacción.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
