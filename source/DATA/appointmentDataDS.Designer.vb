'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.6400
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("appointmentDataDS"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class appointmentDataDS
    Inherits Global.System.Data.DataSet
    
    Private tableAppointments As AppointmentsDataTable
    
    Private tableResources As ResourcesDataTable
    
    Private tableCEINFO_INFORME As CEINFO_INFORMEDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Appointments")) Is Nothing) Then
                MyBase.Tables.Add(New AppointmentsDataTable(ds.Tables("Appointments")))
            End If
            If (Not (ds.Tables("Resources")) Is Nothing) Then
                MyBase.Tables.Add(New ResourcesDataTable(ds.Tables("Resources")))
            End If
            If (Not (ds.Tables("CEINFO_INFORME")) Is Nothing) Then
                MyBase.Tables.Add(New CEINFO_INFORMEDataTable(ds.Tables("CEINFO_INFORME")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Appointments() As AppointmentsDataTable
        Get
            Return Me.tableAppointments
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Resources() As ResourcesDataTable
        Get
            Return Me.tableResources
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CEINFO_INFORME() As CEINFO_INFORMEDataTable
        Get
            Return Me.tableCEINFO_INFORME
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As appointmentDataDS = CType(MyBase.Clone,appointmentDataDS)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Appointments")) Is Nothing) Then
                MyBase.Tables.Add(New AppointmentsDataTable(ds.Tables("Appointments")))
            End If
            If (Not (ds.Tables("Resources")) Is Nothing) Then
                MyBase.Tables.Add(New ResourcesDataTable(ds.Tables("Resources")))
            End If
            If (Not (ds.Tables("CEINFO_INFORME")) Is Nothing) Then
                MyBase.Tables.Add(New CEINFO_INFORMEDataTable(ds.Tables("CEINFO_INFORME")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableAppointments = CType(MyBase.Tables("Appointments"),AppointmentsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAppointments) Is Nothing) Then
                Me.tableAppointments.InitVars
            End If
        End If
        Me.tableResources = CType(MyBase.Tables("Resources"),ResourcesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableResources) Is Nothing) Then
                Me.tableResources.InitVars
            End If
        End If
        Me.tableCEINFO_INFORME = CType(MyBase.Tables("CEINFO_INFORME"),CEINFO_INFORMEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCEINFO_INFORME) Is Nothing) Then
                Me.tableCEINFO_INFORME.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "appointmentDataDS"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/appointmentDataDS.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableAppointments = New AppointmentsDataTable
        MyBase.Tables.Add(Me.tableAppointments)
        Me.tableResources = New ResourcesDataTable
        MyBase.Tables.Add(Me.tableResources)
        Me.tableCEINFO_INFORME = New CEINFO_INFORMEDataTable
        MyBase.Tables.Add(Me.tableCEINFO_INFORME)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAppointments() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeResources() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCEINFO_INFORME() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As appointmentDataDS = New appointmentDataDS
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub AppointmentsRowChangeEventHandler(ByVal sender As Object, ByVal e As AppointmentsRowChangeEvent)
    
    Public Delegate Sub ResourcesRowChangeEventHandler(ByVal sender As Object, ByVal e As ResourcesRowChangeEvent)
    
    Public Delegate Sub CEINFO_INFORMERowChangeEventHandler(ByVal sender As Object, ByVal e As CEINFO_INFORMERowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AppointmentsDataTable
        Inherits Global.System.Data.TypedTableBase(Of AppointmentsRow)
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        Private columnStartDate As Global.System.Data.DataColumn
        
        Private columnEndDate As Global.System.Data.DataColumn
        
        Private columnAllDay As Global.System.Data.DataColumn
        
        Private columnSubject As Global.System.Data.DataColumn
        
        Private columnLocation As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnLabel As Global.System.Data.DataColumn
        
        Private columnResourceID As Global.System.Data.DataColumn
        
        Private columnResourceIDs As Global.System.Data.DataColumn
        
        Private columnReminderInfo As Global.System.Data.DataColumn
        
        Private columnRecurrenceInfo As Global.System.Data.DataColumn
        
        Private columnCustomField1 As Global.System.Data.DataColumn
        
        Private columnUserId As Global.System.Data.DataColumn
        
        Private columnInformeId As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Appointments"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StartDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStartDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EndDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEndDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AllDayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAllDay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubject
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LabelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLabel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ResourceIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnResourceID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ResourceIDsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnResourceIDs
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReminderInfoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReminderInfo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecurrenceInfoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecurrenceInfo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomField1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomField1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UserIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUserId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InformeIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInformeId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AppointmentsRow
            Get
                Return CType(Me.Rows(index),AppointmentsRow)
            End Get
        End Property
        
        Public Event AppointmentsRowChanging As AppointmentsRowChangeEventHandler
        
        Public Event AppointmentsRowChanged As AppointmentsRowChangeEventHandler
        
        Public Event AppointmentsRowDeleting As AppointmentsRowChangeEventHandler
        
        Public Event AppointmentsRowDeleted As AppointmentsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAppointmentsRow(ByVal row As AppointmentsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAppointmentsRow( _
                    ByVal Type As Integer,  _
                    ByVal StartDate As Date,  _
                    ByVal EndDate As Date,  _
                    ByVal AllDay As Boolean,  _
                    ByVal Subject As String,  _
                    ByVal Location As String,  _
                    ByVal Description As String,  _
                    ByVal Status As Integer,  _
                    ByVal Label As Integer,  _
                    ByVal ResourceID As Integer,  _
                    ByVal ResourceIDs As String,  _
                    ByVal ReminderInfo As String,  _
                    ByVal RecurrenceInfo As String,  _
                    ByVal CustomField1 As String,  _
                    ByVal UserId As Integer,  _
                    ByVal InformeId As Integer) As AppointmentsRow
            Dim rowAppointmentsRow As AppointmentsRow = CType(Me.NewRow,AppointmentsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Type, StartDate, EndDate, AllDay, Subject, Location, Description, Status, Label, ResourceID, ResourceIDs, ReminderInfo, RecurrenceInfo, CustomField1, UserId, InformeId}
            rowAppointmentsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAppointmentsRow)
            Return rowAppointmentsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByUniqueID(ByVal UniqueID As Integer) As AppointmentsRow
            Return CType(Me.Rows.Find(New Object() {UniqueID}),AppointmentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AppointmentsDataTable = CType(MyBase.Clone,AppointmentsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AppointmentsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnUniqueID = MyBase.Columns("UniqueID")
            Me.columnType = MyBase.Columns("Type")
            Me.columnStartDate = MyBase.Columns("StartDate")
            Me.columnEndDate = MyBase.Columns("EndDate")
            Me.columnAllDay = MyBase.Columns("AllDay")
            Me.columnSubject = MyBase.Columns("Subject")
            Me.columnLocation = MyBase.Columns("Location")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnLabel = MyBase.Columns("Label")
            Me.columnResourceID = MyBase.Columns("ResourceID")
            Me.columnResourceIDs = MyBase.Columns("ResourceIDs")
            Me.columnReminderInfo = MyBase.Columns("ReminderInfo")
            Me.columnRecurrenceInfo = MyBase.Columns("RecurrenceInfo")
            Me.columnCustomField1 = MyBase.Columns("CustomField1")
            Me.columnUserId = MyBase.Columns("UserId")
            Me.columnInformeId = MyBase.Columns("InformeId")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me.columnStartDate = New Global.System.Data.DataColumn("StartDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStartDate)
            Me.columnEndDate = New Global.System.Data.DataColumn("EndDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEndDate)
            Me.columnAllDay = New Global.System.Data.DataColumn("AllDay", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAllDay)
            Me.columnSubject = New Global.System.Data.DataColumn("Subject", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubject)
            Me.columnLocation = New Global.System.Data.DataColumn("Location", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocation)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnLabel = New Global.System.Data.DataColumn("Label", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLabel)
            Me.columnResourceID = New Global.System.Data.DataColumn("ResourceID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResourceID)
            Me.columnResourceIDs = New Global.System.Data.DataColumn("ResourceIDs", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResourceIDs)
            Me.columnReminderInfo = New Global.System.Data.DataColumn("ReminderInfo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReminderInfo)
            Me.columnRecurrenceInfo = New Global.System.Data.DataColumn("RecurrenceInfo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecurrenceInfo)
            Me.columnCustomField1 = New Global.System.Data.DataColumn("CustomField1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomField1)
            Me.columnUserId = New Global.System.Data.DataColumn("UserId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUserId)
            Me.columnInformeId = New Global.System.Data.DataColumn("InformeId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInformeId)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
            Me.columnSubject.MaxLength = 50
            Me.columnLocation.MaxLength = 50
            Me.columnDescription.MaxLength = 2147483647
            Me.columnResourceIDs.MaxLength = 2147483647
            Me.columnReminderInfo.MaxLength = 2147483647
            Me.columnRecurrenceInfo.MaxLength = 2147483647
            Me.columnCustomField1.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAppointmentsRow() As AppointmentsRow
            Return CType(Me.NewRow,AppointmentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AppointmentsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AppointmentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AppointmentsRowChangedEvent) Is Nothing) Then
                RaiseEvent AppointmentsRowChanged(Me, New AppointmentsRowChangeEvent(CType(e.Row,AppointmentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AppointmentsRowChangingEvent) Is Nothing) Then
                RaiseEvent AppointmentsRowChanging(Me, New AppointmentsRowChangeEvent(CType(e.Row,AppointmentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AppointmentsRowDeletedEvent) Is Nothing) Then
                RaiseEvent AppointmentsRowDeleted(Me, New AppointmentsRowChangeEvent(CType(e.Row,AppointmentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AppointmentsRowDeletingEvent) Is Nothing) Then
                RaiseEvent AppointmentsRowDeleting(Me, New AppointmentsRowChangeEvent(CType(e.Row,AppointmentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAppointmentsRow(ByVal row As AppointmentsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As appointmentDataDS = New appointmentDataDS
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AppointmentsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ResourcesDataTable
        Inherits Global.System.Data.TypedTableBase(Of ResourcesRow)
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        Private columnResourceID As Global.System.Data.DataColumn
        
        Private columnResourceName As Global.System.Data.DataColumn
        
        Private columnColor As Global.System.Data.DataColumn
        
        Private columnImage As Global.System.Data.DataColumn
        
        Private columnCustomField1 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Resources"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ResourceIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnResourceID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ResourceNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnResourceName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ColorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomField1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomField1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ResourcesRow
            Get
                Return CType(Me.Rows(index),ResourcesRow)
            End Get
        End Property
        
        Public Event ResourcesRowChanging As ResourcesRowChangeEventHandler
        
        Public Event ResourcesRowChanged As ResourcesRowChangeEventHandler
        
        Public Event ResourcesRowDeleting As ResourcesRowChangeEventHandler
        
        Public Event ResourcesRowDeleted As ResourcesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddResourcesRow(ByVal row As ResourcesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddResourcesRow(ByVal ResourceID As Integer, ByVal ResourceName As String, ByVal Color As Integer, ByVal Image() As Byte, ByVal CustomField1 As String) As ResourcesRow
            Dim rowResourcesRow As ResourcesRow = CType(Me.NewRow,ResourcesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ResourceID, ResourceName, Color, Image, CustomField1}
            rowResourcesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowResourcesRow)
            Return rowResourcesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByUniqueID(ByVal UniqueID As Integer) As ResourcesRow
            Return CType(Me.Rows.Find(New Object() {UniqueID}),ResourcesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ResourcesDataTable = CType(MyBase.Clone,ResourcesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ResourcesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnUniqueID = MyBase.Columns("UniqueID")
            Me.columnResourceID = MyBase.Columns("ResourceID")
            Me.columnResourceName = MyBase.Columns("ResourceName")
            Me.columnColor = MyBase.Columns("Color")
            Me.columnImage = MyBase.Columns("Image")
            Me.columnCustomField1 = MyBase.Columns("CustomField1")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.columnResourceID = New Global.System.Data.DataColumn("ResourceID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResourceID)
            Me.columnResourceName = New Global.System.Data.DataColumn("ResourceName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResourceName)
            Me.columnColor = New Global.System.Data.DataColumn("Color", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColor)
            Me.columnImage = New Global.System.Data.DataColumn("Image", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImage)
            Me.columnCustomField1 = New Global.System.Data.DataColumn("CustomField1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomField1)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
            Me.columnResourceID.AllowDBNull = false
            Me.columnResourceName.MaxLength = 50
            Me.columnCustomField1.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewResourcesRow() As ResourcesRow
            Return CType(Me.NewRow,ResourcesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ResourcesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ResourcesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ResourcesRowChangedEvent) Is Nothing) Then
                RaiseEvent ResourcesRowChanged(Me, New ResourcesRowChangeEvent(CType(e.Row,ResourcesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ResourcesRowChangingEvent) Is Nothing) Then
                RaiseEvent ResourcesRowChanging(Me, New ResourcesRowChangeEvent(CType(e.Row,ResourcesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ResourcesRowDeletedEvent) Is Nothing) Then
                RaiseEvent ResourcesRowDeleted(Me, New ResourcesRowChangeEvent(CType(e.Row,ResourcesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ResourcesRowDeletingEvent) Is Nothing) Then
                RaiseEvent ResourcesRowDeleting(Me, New ResourcesRowChangeEvent(CType(e.Row,ResourcesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveResourcesRow(ByVal row As ResourcesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As appointmentDataDS = New appointmentDataDS
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ResourcesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CEINFO_INFORMEDataTable
        Inherits Global.System.Data.TypedTableBase(Of CEINFO_INFORMERow)
        
        Private columnCEINFO_CODIGO As Global.System.Data.DataColumn
        
        Private columnCENOTI_CODIGO As Global.System.Data.DataColumn
        
        Private columnCEINFO_DISOPR As Global.System.Data.DataColumn
        
        Private columnCEINFO_SITVIV As Global.System.Data.DataColumn
        
        Private columnCEINFO_ENTREA As Global.System.Data.DataColumn
        
        Private columnCEINFO_ACCREA As Global.System.Data.DataColumn
        
        Private columnCEINFO_CONREC As Global.System.Data.DataColumn
        
        Private columnCEINFO_ESTSAL As Global.System.Data.DataColumn
        
        Private columnCEINFO_NEASME As Global.System.Data.DataColumn
        
        Private columnCEINFO_TIECUR As Global.System.Data.DataColumn
        
        Private columnCEINFO_PRIOCU As Global.System.Data.DataColumn
        
        Private columnCEINFO_TASFUN As Global.System.Data.DataColumn
        
        Private columnCEINFO_CICATR As Global.System.Data.DataColumn
        
        Private columnCEINFO_FECINI As Global.System.Data.DataColumn
        
        Private columnCEINFO_FECFIN As Global.System.Data.DataColumn
        
        Private columnCEINFO_TIPOXX As Global.System.Data.DataColumn
        
        Private columnCEINFO_METAPL As Global.System.Data.DataColumn
        
        Private columnCEPERS_CODIGO As Global.System.Data.DataColumn
        
        Private columnCEHOR_HORA As Global.System.Data.DataColumn
        
        Private columnCEINFO_ESTADO As Global.System.Data.DataColumn
        
        Private columnCEINFO_ESTADOSISTEMA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CEINFO_INFORME"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CEINFO_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCEINFO_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CENOTI_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCENOTI_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CEINFO_DISOPRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCEINFO_DISOPR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CEINFO_SITVIVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCEINFO_SITVIV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CEINFO_ENTREAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCEINFO_ENTREA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CEINFO_ACCREAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCEINFO_ACCREA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CEINFO_CONRECColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCEINFO_CONREC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CEINFO_ESTSALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCEINFO_ESTSAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CEINFO_NEASMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCEINFO_NEASME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CEINFO_TIECURColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCEINFO_TIECUR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CEINFO_PRIOCUColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCEINFO_PRIOCU
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CEINFO_TASFUNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCEINFO_TASFUN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CEINFO_CICATRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCEINFO_CICATR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CEINFO_FECINIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCEINFO_FECINI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CEINFO_FECFINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCEINFO_FECFIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CEINFO_TIPOXXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCEINFO_TIPOXX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CEINFO_METAPLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCEINFO_METAPL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CEPERS_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCEPERS_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CEHOR_HORAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCEHOR_HORA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CEINFO_ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCEINFO_ESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CEINFO_ESTADOSISTEMAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCEINFO_ESTADOSISTEMA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CEINFO_INFORMERow
            Get
                Return CType(Me.Rows(index),CEINFO_INFORMERow)
            End Get
        End Property
        
        Public Event CEINFO_INFORMERowChanging As CEINFO_INFORMERowChangeEventHandler
        
        Public Event CEINFO_INFORMERowChanged As CEINFO_INFORMERowChangeEventHandler
        
        Public Event CEINFO_INFORMERowDeleting As CEINFO_INFORMERowChangeEventHandler
        
        Public Event CEINFO_INFORMERowDeleted As CEINFO_INFORMERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCEINFO_INFORMERow(ByVal row As CEINFO_INFORMERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCEINFO_INFORMERow( _
                    ByVal CENOTI_CODIGO As Integer,  _
                    ByVal CEINFO_DISOPR As String,  _
                    ByVal CEINFO_SITVIV As String,  _
                    ByVal CEINFO_ENTREA As String,  _
                    ByVal CEINFO_ACCREA As String,  _
                    ByVal CEINFO_CONREC As String,  _
                    ByVal CEINFO_ESTSAL As String,  _
                    ByVal CEINFO_NEASME As String,  _
                    ByVal CEINFO_TIECUR As String,  _
                    ByVal CEINFO_PRIOCU As String,  _
                    ByVal CEINFO_TASFUN As String,  _
                    ByVal CEINFO_CICATR As String,  _
                    ByVal CEINFO_FECINI As Date,  _
                    ByVal CEINFO_FECFIN As Date,  _
                    ByVal CEINFO_TIPOXX As String,  _
                    ByVal CEINFO_METAPL As String,  _
                    ByVal CEPERS_CODIGO As Integer,  _
                    ByVal CEHOR_HORA As String,  _
                    ByVal CEINFO_ESTADO As String,  _
                    ByVal CEINFO_ESTADOSISTEMA As String) As CEINFO_INFORMERow
            Dim rowCEINFO_INFORMERow As CEINFO_INFORMERow = CType(Me.NewRow,CEINFO_INFORMERow)
            Dim columnValuesArray() As Object = New Object() {Nothing, CENOTI_CODIGO, CEINFO_DISOPR, CEINFO_SITVIV, CEINFO_ENTREA, CEINFO_ACCREA, CEINFO_CONREC, CEINFO_ESTSAL, CEINFO_NEASME, CEINFO_TIECUR, CEINFO_PRIOCU, CEINFO_TASFUN, CEINFO_CICATR, CEINFO_FECINI, CEINFO_FECFIN, CEINFO_TIPOXX, CEINFO_METAPL, CEPERS_CODIGO, CEHOR_HORA, CEINFO_ESTADO, CEINFO_ESTADOSISTEMA}
            rowCEINFO_INFORMERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCEINFO_INFORMERow)
            Return rowCEINFO_INFORMERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCEINFO_CODIGO(ByVal CEINFO_CODIGO As Integer) As CEINFO_INFORMERow
            Return CType(Me.Rows.Find(New Object() {CEINFO_CODIGO}),CEINFO_INFORMERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CEINFO_INFORMEDataTable = CType(MyBase.Clone,CEINFO_INFORMEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CEINFO_INFORMEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCEINFO_CODIGO = MyBase.Columns("CEINFO_CODIGO")
            Me.columnCENOTI_CODIGO = MyBase.Columns("CENOTI_CODIGO")
            Me.columnCEINFO_DISOPR = MyBase.Columns("CEINFO_DISOPR")
            Me.columnCEINFO_SITVIV = MyBase.Columns("CEINFO_SITVIV")
            Me.columnCEINFO_ENTREA = MyBase.Columns("CEINFO_ENTREA")
            Me.columnCEINFO_ACCREA = MyBase.Columns("CEINFO_ACCREA")
            Me.columnCEINFO_CONREC = MyBase.Columns("CEINFO_CONREC")
            Me.columnCEINFO_ESTSAL = MyBase.Columns("CEINFO_ESTSAL")
            Me.columnCEINFO_NEASME = MyBase.Columns("CEINFO_NEASME")
            Me.columnCEINFO_TIECUR = MyBase.Columns("CEINFO_TIECUR")
            Me.columnCEINFO_PRIOCU = MyBase.Columns("CEINFO_PRIOCU")
            Me.columnCEINFO_TASFUN = MyBase.Columns("CEINFO_TASFUN")
            Me.columnCEINFO_CICATR = MyBase.Columns("CEINFO_CICATR")
            Me.columnCEINFO_FECINI = MyBase.Columns("CEINFO_FECINI")
            Me.columnCEINFO_FECFIN = MyBase.Columns("CEINFO_FECFIN")
            Me.columnCEINFO_TIPOXX = MyBase.Columns("CEINFO_TIPOXX")
            Me.columnCEINFO_METAPL = MyBase.Columns("CEINFO_METAPL")
            Me.columnCEPERS_CODIGO = MyBase.Columns("CEPERS_CODIGO")
            Me.columnCEHOR_HORA = MyBase.Columns("CEHOR_HORA")
            Me.columnCEINFO_ESTADO = MyBase.Columns("CEINFO_ESTADO")
            Me.columnCEINFO_ESTADOSISTEMA = MyBase.Columns("CEINFO_ESTADOSISTEMA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCEINFO_CODIGO = New Global.System.Data.DataColumn("CEINFO_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCEINFO_CODIGO)
            Me.columnCENOTI_CODIGO = New Global.System.Data.DataColumn("CENOTI_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCENOTI_CODIGO)
            Me.columnCEINFO_DISOPR = New Global.System.Data.DataColumn("CEINFO_DISOPR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCEINFO_DISOPR)
            Me.columnCEINFO_SITVIV = New Global.System.Data.DataColumn("CEINFO_SITVIV", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCEINFO_SITVIV)
            Me.columnCEINFO_ENTREA = New Global.System.Data.DataColumn("CEINFO_ENTREA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCEINFO_ENTREA)
            Me.columnCEINFO_ACCREA = New Global.System.Data.DataColumn("CEINFO_ACCREA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCEINFO_ACCREA)
            Me.columnCEINFO_CONREC = New Global.System.Data.DataColumn("CEINFO_CONREC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCEINFO_CONREC)
            Me.columnCEINFO_ESTSAL = New Global.System.Data.DataColumn("CEINFO_ESTSAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCEINFO_ESTSAL)
            Me.columnCEINFO_NEASME = New Global.System.Data.DataColumn("CEINFO_NEASME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCEINFO_NEASME)
            Me.columnCEINFO_TIECUR = New Global.System.Data.DataColumn("CEINFO_TIECUR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCEINFO_TIECUR)
            Me.columnCEINFO_PRIOCU = New Global.System.Data.DataColumn("CEINFO_PRIOCU", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCEINFO_PRIOCU)
            Me.columnCEINFO_TASFUN = New Global.System.Data.DataColumn("CEINFO_TASFUN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCEINFO_TASFUN)
            Me.columnCEINFO_CICATR = New Global.System.Data.DataColumn("CEINFO_CICATR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCEINFO_CICATR)
            Me.columnCEINFO_FECINI = New Global.System.Data.DataColumn("CEINFO_FECINI", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCEINFO_FECINI)
            Me.columnCEINFO_FECFIN = New Global.System.Data.DataColumn("CEINFO_FECFIN", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCEINFO_FECFIN)
            Me.columnCEINFO_TIPOXX = New Global.System.Data.DataColumn("CEINFO_TIPOXX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCEINFO_TIPOXX)
            Me.columnCEINFO_METAPL = New Global.System.Data.DataColumn("CEINFO_METAPL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCEINFO_METAPL)
            Me.columnCEPERS_CODIGO = New Global.System.Data.DataColumn("CEPERS_CODIGO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCEPERS_CODIGO)
            Me.columnCEHOR_HORA = New Global.System.Data.DataColumn("CEHOR_HORA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCEHOR_HORA)
            Me.columnCEINFO_ESTADO = New Global.System.Data.DataColumn("CEINFO_ESTADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCEINFO_ESTADO)
            Me.columnCEINFO_ESTADOSISTEMA = New Global.System.Data.DataColumn("CEINFO_ESTADOSISTEMA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCEINFO_ESTADOSISTEMA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCEINFO_CODIGO}, true))
            Me.columnCEINFO_CODIGO.AutoIncrement = true
            Me.columnCEINFO_CODIGO.AutoIncrementSeed = -1
            Me.columnCEINFO_CODIGO.AutoIncrementStep = -1
            Me.columnCEINFO_CODIGO.AllowDBNull = false
            Me.columnCEINFO_CODIGO.ReadOnly = true
            Me.columnCEINFO_CODIGO.Unique = true
            Me.columnCEINFO_DISOPR.MaxLength = 1000
            Me.columnCEINFO_SITVIV.MaxLength = 1000
            Me.columnCEINFO_ENTREA.MaxLength = 1000
            Me.columnCEINFO_ACCREA.MaxLength = 1000
            Me.columnCEINFO_CONREC.MaxLength = 1000
            Me.columnCEINFO_ESTSAL.MaxLength = 1000
            Me.columnCEINFO_NEASME.MaxLength = 1000
            Me.columnCEINFO_TIECUR.MaxLength = 1000
            Me.columnCEINFO_PRIOCU.MaxLength = 1000
            Me.columnCEINFO_TASFUN.MaxLength = 1000
            Me.columnCEINFO_CICATR.MaxLength = 1000
            Me.columnCEINFO_TIPOXX.MaxLength = 80
            Me.columnCEINFO_METAPL.MaxLength = 1000
            Me.columnCEHOR_HORA.MaxLength = 50
            Me.columnCEINFO_ESTADO.MaxLength = 50
            Me.columnCEINFO_ESTADOSISTEMA.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCEINFO_INFORMERow() As CEINFO_INFORMERow
            Return CType(Me.NewRow,CEINFO_INFORMERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CEINFO_INFORMERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CEINFO_INFORMERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CEINFO_INFORMERowChangedEvent) Is Nothing) Then
                RaiseEvent CEINFO_INFORMERowChanged(Me, New CEINFO_INFORMERowChangeEvent(CType(e.Row,CEINFO_INFORMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CEINFO_INFORMERowChangingEvent) Is Nothing) Then
                RaiseEvent CEINFO_INFORMERowChanging(Me, New CEINFO_INFORMERowChangeEvent(CType(e.Row,CEINFO_INFORMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CEINFO_INFORMERowDeletedEvent) Is Nothing) Then
                RaiseEvent CEINFO_INFORMERowDeleted(Me, New CEINFO_INFORMERowChangeEvent(CType(e.Row,CEINFO_INFORMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CEINFO_INFORMERowDeletingEvent) Is Nothing) Then
                RaiseEvent CEINFO_INFORMERowDeleting(Me, New CEINFO_INFORMERowChangeEvent(CType(e.Row,CEINFO_INFORMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCEINFO_INFORMERow(ByVal row As CEINFO_INFORMERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As appointmentDataDS = New appointmentDataDS
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CEINFO_INFORMEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AppointmentsRow
        Inherits Global.System.Data.DataRow
        
        Private tableAppointments As AppointmentsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAppointments = CType(Me.Table,AppointmentsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UniqueID() As Integer
            Get
                Return CType(Me(Me.tableAppointments.UniqueIDColumn),Integer)
            End Get
            Set
                Me(Me.tableAppointments.UniqueIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAppointments.TypeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Type' de la tabla 'Appointments' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAppointments.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StartDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAppointments.StartDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'StartDate' de la tabla 'Appointments' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAppointments.StartDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EndDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAppointments.EndDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EndDate' de la tabla 'Appointments' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAppointments.EndDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AllDay() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAppointments.AllDayColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AllDay' de la tabla 'Appointments' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAppointments.AllDayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subject() As String
            Get
                Try 
                    Return CType(Me(Me.tableAppointments.SubjectColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Subject' de la tabla 'Appointments' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAppointments.SubjectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Location() As String
            Get
                Try 
                    Return CType(Me(Me.tableAppointments.LocationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Location' de la tabla 'Appointments' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAppointments.LocationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableAppointments.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Description' de la tabla 'Appointments' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAppointments.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAppointments.StatusColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Status' de la tabla 'Appointments' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAppointments.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Label() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAppointments.LabelColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Label' de la tabla 'Appointments' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAppointments.LabelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ResourceID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAppointments.ResourceIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ResourceID' de la tabla 'Appointments' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAppointments.ResourceIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ResourceIDs() As String
            Get
                Try 
                    Return CType(Me(Me.tableAppointments.ResourceIDsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ResourceIDs' de la tabla 'Appointments' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAppointments.ResourceIDsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReminderInfo() As String
            Get
                Try 
                    Return CType(Me(Me.tableAppointments.ReminderInfoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ReminderInfo' de la tabla 'Appointments' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAppointments.ReminderInfoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecurrenceInfo() As String
            Get
                Try 
                    Return CType(Me(Me.tableAppointments.RecurrenceInfoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RecurrenceInfo' de la tabla 'Appointments' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAppointments.RecurrenceInfoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomField1() As String
            Get
                Try 
                    Return CType(Me(Me.tableAppointments.CustomField1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CustomField1' de la tabla 'Appointments' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAppointments.CustomField1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UserId() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAppointments.UserIdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UserId' de la tabla 'Appointments' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAppointments.UserIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InformeId() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAppointments.InformeIdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'InformeId' de la tabla 'Appointments' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAppointments.InformeIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tableAppointments.TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeNull()
            Me(Me.tableAppointments.TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStartDateNull() As Boolean
            Return Me.IsNull(Me.tableAppointments.StartDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStartDateNull()
            Me(Me.tableAppointments.StartDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEndDateNull() As Boolean
            Return Me.IsNull(Me.tableAppointments.EndDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEndDateNull()
            Me(Me.tableAppointments.EndDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAllDayNull() As Boolean
            Return Me.IsNull(Me.tableAppointments.AllDayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAllDayNull()
            Me(Me.tableAppointments.AllDayColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubjectNull() As Boolean
            Return Me.IsNull(Me.tableAppointments.SubjectColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubjectNull()
            Me(Me.tableAppointments.SubjectColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocationNull() As Boolean
            Return Me.IsNull(Me.tableAppointments.LocationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocationNull()
            Me(Me.tableAppointments.LocationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableAppointments.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tableAppointments.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tableAppointments.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tableAppointments.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLabelNull() As Boolean
            Return Me.IsNull(Me.tableAppointments.LabelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLabelNull()
            Me(Me.tableAppointments.LabelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsResourceIDNull() As Boolean
            Return Me.IsNull(Me.tableAppointments.ResourceIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetResourceIDNull()
            Me(Me.tableAppointments.ResourceIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsResourceIDsNull() As Boolean
            Return Me.IsNull(Me.tableAppointments.ResourceIDsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetResourceIDsNull()
            Me(Me.tableAppointments.ResourceIDsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReminderInfoNull() As Boolean
            Return Me.IsNull(Me.tableAppointments.ReminderInfoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReminderInfoNull()
            Me(Me.tableAppointments.ReminderInfoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRecurrenceInfoNull() As Boolean
            Return Me.IsNull(Me.tableAppointments.RecurrenceInfoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRecurrenceInfoNull()
            Me(Me.tableAppointments.RecurrenceInfoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomField1Null() As Boolean
            Return Me.IsNull(Me.tableAppointments.CustomField1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomField1Null()
            Me(Me.tableAppointments.CustomField1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUserIdNull() As Boolean
            Return Me.IsNull(Me.tableAppointments.UserIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUserIdNull()
            Me(Me.tableAppointments.UserIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInformeIdNull() As Boolean
            Return Me.IsNull(Me.tableAppointments.InformeIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInformeIdNull()
            Me(Me.tableAppointments.InformeIdColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ResourcesRow
        Inherits Global.System.Data.DataRow
        
        Private tableResources As ResourcesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableResources = CType(Me.Table,ResourcesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UniqueID() As Integer
            Get
                Return CType(Me(Me.tableResources.UniqueIDColumn),Integer)
            End Get
            Set
                Me(Me.tableResources.UniqueIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ResourceID() As Integer
            Get
                Return CType(Me(Me.tableResources.ResourceIDColumn),Integer)
            End Get
            Set
                Me(Me.tableResources.ResourceIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ResourceName() As String
            Get
                Try 
                    Return CType(Me(Me.tableResources.ResourceNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ResourceName' de la tabla 'Resources' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResources.ResourceNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Color() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableResources.ColorColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Color' de la tabla 'Resources' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResources.ColorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Image() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableResources.ImageColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Image' de la tabla 'Resources' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResources.ImageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomField1() As String
            Get
                Try 
                    Return CType(Me(Me.tableResources.CustomField1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CustomField1' de la tabla 'Resources' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResources.CustomField1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsResourceNameNull() As Boolean
            Return Me.IsNull(Me.tableResources.ResourceNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetResourceNameNull()
            Me(Me.tableResources.ResourceNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColorNull() As Boolean
            Return Me.IsNull(Me.tableResources.ColorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColorNull()
            Me(Me.tableResources.ColorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImageNull() As Boolean
            Return Me.IsNull(Me.tableResources.ImageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImageNull()
            Me(Me.tableResources.ImageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomField1Null() As Boolean
            Return Me.IsNull(Me.tableResources.CustomField1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomField1Null()
            Me(Me.tableResources.CustomField1Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CEINFO_INFORMERow
        Inherits Global.System.Data.DataRow
        
        Private tableCEINFO_INFORME As CEINFO_INFORMEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCEINFO_INFORME = CType(Me.Table,CEINFO_INFORMEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEINFO_CODIGO() As Integer
            Get
                Return CType(Me(Me.tableCEINFO_INFORME.CEINFO_CODIGOColumn),Integer)
            End Get
            Set
                Me(Me.tableCEINFO_INFORME.CEINFO_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CENOTI_CODIGO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCEINFO_INFORME.CENOTI_CODIGOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CENOTI_CODIGO' de la tabla 'CEINFO_INFORME' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEINFO_INFORME.CENOTI_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEINFO_DISOPR() As String
            Get
                Try 
                    Return CType(Me(Me.tableCEINFO_INFORME.CEINFO_DISOPRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CEINFO_DISOPR' de la tabla 'CEINFO_INFORME' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEINFO_INFORME.CEINFO_DISOPRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEINFO_SITVIV() As String
            Get
                Try 
                    Return CType(Me(Me.tableCEINFO_INFORME.CEINFO_SITVIVColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CEINFO_SITVIV' de la tabla 'CEINFO_INFORME' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEINFO_INFORME.CEINFO_SITVIVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEINFO_ENTREA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCEINFO_INFORME.CEINFO_ENTREAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CEINFO_ENTREA' de la tabla 'CEINFO_INFORME' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEINFO_INFORME.CEINFO_ENTREAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEINFO_ACCREA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCEINFO_INFORME.CEINFO_ACCREAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CEINFO_ACCREA' de la tabla 'CEINFO_INFORME' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEINFO_INFORME.CEINFO_ACCREAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEINFO_CONREC() As String
            Get
                Try 
                    Return CType(Me(Me.tableCEINFO_INFORME.CEINFO_CONRECColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CEINFO_CONREC' de la tabla 'CEINFO_INFORME' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEINFO_INFORME.CEINFO_CONRECColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEINFO_ESTSAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableCEINFO_INFORME.CEINFO_ESTSALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CEINFO_ESTSAL' de la tabla 'CEINFO_INFORME' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEINFO_INFORME.CEINFO_ESTSALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEINFO_NEASME() As String
            Get
                Try 
                    Return CType(Me(Me.tableCEINFO_INFORME.CEINFO_NEASMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CEINFO_NEASME' de la tabla 'CEINFO_INFORME' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEINFO_INFORME.CEINFO_NEASMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEINFO_TIECUR() As String
            Get
                Try 
                    Return CType(Me(Me.tableCEINFO_INFORME.CEINFO_TIECURColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CEINFO_TIECUR' de la tabla 'CEINFO_INFORME' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEINFO_INFORME.CEINFO_TIECURColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEINFO_PRIOCU() As String
            Get
                Try 
                    Return CType(Me(Me.tableCEINFO_INFORME.CEINFO_PRIOCUColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CEINFO_PRIOCU' de la tabla 'CEINFO_INFORME' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEINFO_INFORME.CEINFO_PRIOCUColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEINFO_TASFUN() As String
            Get
                Try 
                    Return CType(Me(Me.tableCEINFO_INFORME.CEINFO_TASFUNColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CEINFO_TASFUN' de la tabla 'CEINFO_INFORME' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEINFO_INFORME.CEINFO_TASFUNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEINFO_CICATR() As String
            Get
                Try 
                    Return CType(Me(Me.tableCEINFO_INFORME.CEINFO_CICATRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CEINFO_CICATR' de la tabla 'CEINFO_INFORME' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEINFO_INFORME.CEINFO_CICATRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEINFO_FECINI() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCEINFO_INFORME.CEINFO_FECINIColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CEINFO_FECINI' de la tabla 'CEINFO_INFORME' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEINFO_INFORME.CEINFO_FECINIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEINFO_FECFIN() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCEINFO_INFORME.CEINFO_FECFINColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CEINFO_FECFIN' de la tabla 'CEINFO_INFORME' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEINFO_INFORME.CEINFO_FECFINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEINFO_TIPOXX() As String
            Get
                Try 
                    Return CType(Me(Me.tableCEINFO_INFORME.CEINFO_TIPOXXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CEINFO_TIPOXX' de la tabla 'CEINFO_INFORME' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEINFO_INFORME.CEINFO_TIPOXXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEINFO_METAPL() As String
            Get
                Try 
                    Return CType(Me(Me.tableCEINFO_INFORME.CEINFO_METAPLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CEINFO_METAPL' de la tabla 'CEINFO_INFORME' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEINFO_INFORME.CEINFO_METAPLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEPERS_CODIGO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCEINFO_INFORME.CEPERS_CODIGOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CEPERS_CODIGO' de la tabla 'CEINFO_INFORME' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEINFO_INFORME.CEPERS_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEHOR_HORA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCEINFO_INFORME.CEHOR_HORAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CEHOR_HORA' de la tabla 'CEINFO_INFORME' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEINFO_INFORME.CEHOR_HORAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEINFO_ESTADO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCEINFO_INFORME.CEINFO_ESTADOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CEINFO_ESTADO' de la tabla 'CEINFO_INFORME' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEINFO_INFORME.CEINFO_ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEINFO_ESTADOSISTEMA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCEINFO_INFORME.CEINFO_ESTADOSISTEMAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CEINFO_ESTADOSISTEMA' de la tabla 'CEINFO_INFORME' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEINFO_INFORME.CEINFO_ESTADOSISTEMAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCENOTI_CODIGONull() As Boolean
            Return Me.IsNull(Me.tableCEINFO_INFORME.CENOTI_CODIGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCENOTI_CODIGONull()
            Me(Me.tableCEINFO_INFORME.CENOTI_CODIGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCEINFO_DISOPRNull() As Boolean
            Return Me.IsNull(Me.tableCEINFO_INFORME.CEINFO_DISOPRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCEINFO_DISOPRNull()
            Me(Me.tableCEINFO_INFORME.CEINFO_DISOPRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCEINFO_SITVIVNull() As Boolean
            Return Me.IsNull(Me.tableCEINFO_INFORME.CEINFO_SITVIVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCEINFO_SITVIVNull()
            Me(Me.tableCEINFO_INFORME.CEINFO_SITVIVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCEINFO_ENTREANull() As Boolean
            Return Me.IsNull(Me.tableCEINFO_INFORME.CEINFO_ENTREAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCEINFO_ENTREANull()
            Me(Me.tableCEINFO_INFORME.CEINFO_ENTREAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCEINFO_ACCREANull() As Boolean
            Return Me.IsNull(Me.tableCEINFO_INFORME.CEINFO_ACCREAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCEINFO_ACCREANull()
            Me(Me.tableCEINFO_INFORME.CEINFO_ACCREAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCEINFO_CONRECNull() As Boolean
            Return Me.IsNull(Me.tableCEINFO_INFORME.CEINFO_CONRECColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCEINFO_CONRECNull()
            Me(Me.tableCEINFO_INFORME.CEINFO_CONRECColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCEINFO_ESTSALNull() As Boolean
            Return Me.IsNull(Me.tableCEINFO_INFORME.CEINFO_ESTSALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCEINFO_ESTSALNull()
            Me(Me.tableCEINFO_INFORME.CEINFO_ESTSALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCEINFO_NEASMENull() As Boolean
            Return Me.IsNull(Me.tableCEINFO_INFORME.CEINFO_NEASMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCEINFO_NEASMENull()
            Me(Me.tableCEINFO_INFORME.CEINFO_NEASMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCEINFO_TIECURNull() As Boolean
            Return Me.IsNull(Me.tableCEINFO_INFORME.CEINFO_TIECURColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCEINFO_TIECURNull()
            Me(Me.tableCEINFO_INFORME.CEINFO_TIECURColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCEINFO_PRIOCUNull() As Boolean
            Return Me.IsNull(Me.tableCEINFO_INFORME.CEINFO_PRIOCUColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCEINFO_PRIOCUNull()
            Me(Me.tableCEINFO_INFORME.CEINFO_PRIOCUColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCEINFO_TASFUNNull() As Boolean
            Return Me.IsNull(Me.tableCEINFO_INFORME.CEINFO_TASFUNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCEINFO_TASFUNNull()
            Me(Me.tableCEINFO_INFORME.CEINFO_TASFUNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCEINFO_CICATRNull() As Boolean
            Return Me.IsNull(Me.tableCEINFO_INFORME.CEINFO_CICATRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCEINFO_CICATRNull()
            Me(Me.tableCEINFO_INFORME.CEINFO_CICATRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCEINFO_FECININull() As Boolean
            Return Me.IsNull(Me.tableCEINFO_INFORME.CEINFO_FECINIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCEINFO_FECININull()
            Me(Me.tableCEINFO_INFORME.CEINFO_FECINIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCEINFO_FECFINNull() As Boolean
            Return Me.IsNull(Me.tableCEINFO_INFORME.CEINFO_FECFINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCEINFO_FECFINNull()
            Me(Me.tableCEINFO_INFORME.CEINFO_FECFINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCEINFO_TIPOXXNull() As Boolean
            Return Me.IsNull(Me.tableCEINFO_INFORME.CEINFO_TIPOXXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCEINFO_TIPOXXNull()
            Me(Me.tableCEINFO_INFORME.CEINFO_TIPOXXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCEINFO_METAPLNull() As Boolean
            Return Me.IsNull(Me.tableCEINFO_INFORME.CEINFO_METAPLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCEINFO_METAPLNull()
            Me(Me.tableCEINFO_INFORME.CEINFO_METAPLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCEPERS_CODIGONull() As Boolean
            Return Me.IsNull(Me.tableCEINFO_INFORME.CEPERS_CODIGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCEPERS_CODIGONull()
            Me(Me.tableCEINFO_INFORME.CEPERS_CODIGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCEHOR_HORANull() As Boolean
            Return Me.IsNull(Me.tableCEINFO_INFORME.CEHOR_HORAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCEHOR_HORANull()
            Me(Me.tableCEINFO_INFORME.CEHOR_HORAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCEINFO_ESTADONull() As Boolean
            Return Me.IsNull(Me.tableCEINFO_INFORME.CEINFO_ESTADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCEINFO_ESTADONull()
            Me(Me.tableCEINFO_INFORME.CEINFO_ESTADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCEINFO_ESTADOSISTEMANull() As Boolean
            Return Me.IsNull(Me.tableCEINFO_INFORME.CEINFO_ESTADOSISTEMAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCEINFO_ESTADOSISTEMANull()
            Me(Me.tableCEINFO_INFORME.CEINFO_ESTADOSISTEMAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AppointmentsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AppointmentsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AppointmentsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AppointmentsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ResourcesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ResourcesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ResourcesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ResourcesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CEINFO_INFORMERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CEINFO_INFORMERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CEINFO_INFORMERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CEINFO_INFORMERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace appointmentDataDSTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AppointmentsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Appointments"
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            tableMapping.ColumnMappings.Add("Type", "Type")
            tableMapping.ColumnMappings.Add("StartDate", "StartDate")
            tableMapping.ColumnMappings.Add("EndDate", "EndDate")
            tableMapping.ColumnMappings.Add("AllDay", "AllDay")
            tableMapping.ColumnMappings.Add("Subject", "Subject")
            tableMapping.ColumnMappings.Add("Location", "Location")
            tableMapping.ColumnMappings.Add("Description", "Description")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("Label", "Label")
            tableMapping.ColumnMappings.Add("ResourceID", "ResourceID")
            tableMapping.ColumnMappings.Add("ResourceIDs", "ResourceIDs")
            tableMapping.ColumnMappings.Add("ReminderInfo", "ReminderInfo")
            tableMapping.ColumnMappings.Add("RecurrenceInfo", "RecurrenceInfo")
            tableMapping.ColumnMappings.Add("CustomField1", "CustomField1")
            tableMapping.ColumnMappings.Add("UserId", "UserId")
            tableMapping.ColumnMappings.Add("InformeId", "InformeId")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Appointments] WHERE (([UniqueID] = @Original_UniqueID) AND ((@"& _ 
                "IsNull_Type = 1 AND [Type] IS NULL) OR ([Type] = @Original_Type)) AND ((@IsNull_"& _ 
                "StartDate = 1 AND [StartDate] IS NULL) OR ([StartDate] = @Original_StartDate)) A"& _ 
                "ND ((@IsNull_EndDate = 1 AND [EndDate] IS NULL) OR ([EndDate] = @Original_EndDat"& _ 
                "e)) AND ((@IsNull_AllDay = 1 AND [AllDay] IS NULL) OR ([AllDay] = @Original_AllD"& _ 
                "ay)) AND ((@IsNull_Subject = 1 AND [Subject] IS NULL) OR ([Subject] = @Original_"& _ 
                "Subject)) AND ((@IsNull_Location = 1 AND [Location] IS NULL) OR ([Location] = @O"& _ 
                "riginal_Location)) AND ((@IsNull_Status = 1 AND [Status] IS NULL) OR ([Status] ="& _ 
                " @Original_Status)) AND ((@IsNull_Label = 1 AND [Label] IS NULL) OR ([Label] = @"& _ 
                "Original_Label)) AND ((@IsNull_ResourceID = 1 AND [ResourceID] IS NULL) OR ([Res"& _ 
                "ourceID] = @Original_ResourceID)) AND ((@IsNull_UserId = 1 AND [UserId] IS NULL)"& _ 
                " OR ([UserId] = @Original_UserId)) AND ((@IsNull_InformeId = 1 AND [InformeId] I"& _ 
                "S NULL) OR ([InformeId] = @Original_InformeId)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Type", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Type", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StartDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StartDate", Global.System.Data.SqlDbType.SmallDateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EndDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EndDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EndDate", Global.System.Data.SqlDbType.SmallDateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EndDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AllDay", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AllDay", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AllDay", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AllDay", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Subject", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Subject", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Subject", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Subject", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Location", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Location", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Location", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Location", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Label", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Label", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Label", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Label", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ResourceID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ResourceID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UserId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserId", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UserId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserId", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_InformeId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InformeId", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_InformeId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InformeId", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Appointments] ([Type], [StartDate], [EndDate], [AllDay], [Subj"& _ 
                "ect], [Location], [Description], [Status], [Label], [ResourceID], [ResourceIDs],"& _ 
                " [ReminderInfo], [RecurrenceInfo], [CustomField1], [UserId], [InformeId]) VALUES"& _ 
                " (@Type, @StartDate, @EndDate, @AllDay, @Subject, @Location, @Description, @Stat"& _ 
                "us, @Label, @ResourceID, @ResourceIDs, @ReminderInfo, @RecurrenceInfo, @CustomFi"& _ 
                "eld1, @UserId, @InformeId);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT UniqueID, Type, StartDate, EndDate, AllDay, "& _ 
                "Subject, Location, Description, Status, Label, ResourceID, ResourceIDs, Reminder"& _ 
                "Info, RecurrenceInfo, CustomField1, UserId, InformeId FROM Appointments WHERE (U"& _ 
                "niqueID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Type", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StartDate", Global.System.Data.SqlDbType.SmallDateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EndDate", Global.System.Data.SqlDbType.SmallDateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EndDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AllDay", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AllDay", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Subject", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Subject", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Location", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Location", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Description", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Description", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Label", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Label", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ResourceID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ResourceIDs", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceIDs", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReminderInfo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReminderInfo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecurrenceInfo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecurrenceInfo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomField1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomField1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UserId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserId", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InformeId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InformeId", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Appointments] SET [Type] = @Type, [StartDate] = @StartDate, [EndDat"& _ 
                "e] = @EndDate, [AllDay] = @AllDay, [Subject] = @Subject, [Location] = @Location,"& _ 
                " [Description] = @Description, [Status] = @Status, [Label] = @Label, [ResourceID"& _ 
                "] = @ResourceID, [ResourceIDs] = @ResourceIDs, [ReminderInfo] = @ReminderInfo, ["& _ 
                "RecurrenceInfo] = @RecurrenceInfo, [CustomField1] = @CustomField1, [UserId] = @U"& _ 
                "serId, [InformeId] = @InformeId WHERE (([UniqueID] = @Original_UniqueID) AND ((@"& _ 
                "IsNull_Type = 1 AND [Type] IS NULL) OR ([Type] = @Original_Type)) AND ((@IsNull_"& _ 
                "StartDate = 1 AND [StartDate] IS NULL) OR ([StartDate] = @Original_StartDate)) A"& _ 
                "ND ((@IsNull_EndDate = 1 AND [EndDate] IS NULL) OR ([EndDate] = @Original_EndDat"& _ 
                "e)) AND ((@IsNull_AllDay = 1 AND [AllDay] IS NULL) OR ([AllDay] = @Original_AllD"& _ 
                "ay)) AND ((@IsNull_Subject = 1 AND [Subject] IS NULL) OR ([Subject] = @Original_"& _ 
                "Subject)) AND ((@IsNull_Location = 1 AND [Location] IS NULL) OR ([Location] = @O"& _ 
                "riginal_Location)) AND ((@IsNull_Status = 1 AND [Status] IS NULL) OR ([Status] ="& _ 
                " @Original_Status)) AND ((@IsNull_Label = 1 AND [Label] IS NULL) OR ([Label] = @"& _ 
                "Original_Label)) AND ((@IsNull_ResourceID = 1 AND [ResourceID] IS NULL) OR ([Res"& _ 
                "ourceID] = @Original_ResourceID)) AND ((@IsNull_UserId = 1 AND [UserId] IS NULL)"& _ 
                " OR ([UserId] = @Original_UserId)) AND ((@IsNull_InformeId = 1 AND [InformeId] I"& _ 
                "S NULL) OR ([InformeId] = @Original_InformeId)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT UniqueID, Type, StartD"& _ 
                "ate, EndDate, AllDay, Subject, Location, Description, Status, Label, ResourceID,"& _ 
                " ResourceIDs, ReminderInfo, RecurrenceInfo, CustomField1, UserId, InformeId FROM"& _ 
                " Appointments WHERE (UniqueID = @UniqueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Type", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StartDate", Global.System.Data.SqlDbType.SmallDateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EndDate", Global.System.Data.SqlDbType.SmallDateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EndDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AllDay", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AllDay", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Subject", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Subject", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Location", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Location", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Description", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Description", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Label", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Label", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ResourceID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ResourceIDs", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceIDs", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReminderInfo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReminderInfo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecurrenceInfo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecurrenceInfo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomField1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomField1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UserId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserId", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InformeId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InformeId", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Type", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Type", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StartDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StartDate", Global.System.Data.SqlDbType.SmallDateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EndDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EndDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EndDate", Global.System.Data.SqlDbType.SmallDateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EndDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AllDay", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AllDay", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AllDay", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AllDay", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Subject", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Subject", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Subject", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Subject", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Location", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Location", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Location", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Location", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Label", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Label", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Label", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Label", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ResourceID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ResourceID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UserId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserId", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UserId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserId", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_InformeId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InformeId", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_InformeId", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InformeId", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SISOTEC.My.MySettings.Default.dbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT UniqueID, Type, StartDate, EndDate, AllDay, Subject, Location, Description"& _ 
                ", Status, Label, ResourceID, ResourceIDs, ReminderInfo, RecurrenceInfo, CustomFi"& _ 
                "eld1, UserId, InformeId FROM dbo.Appointments"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT UniqueID, Type, StartDate, EndDate, AllDay, Subject, Location, Description"& _ 
                ", Status, Label, ResourceID, ResourceIDs, ReminderInfo, RecurrenceInfo, CustomFi"& _ 
                "eld1, UserId, InformeId FROM dbo.Appointments where "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" UserId = @UserId and  Inf"& _ 
                "ormeId = @InformeId"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UserId", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "UserId", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InformeId", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "InformeId", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As appointmentDataDS.AppointmentsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As appointmentDataDS.AppointmentsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As appointmentDataDS.AppointmentsDataTable = New appointmentDataDS.AppointmentsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function filDataBy(ByVal dataTable As appointmentDataDS.AppointmentsDataTable, ByVal UserId As Global.System.Nullable(Of Integer), ByVal InformeId As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (UserId.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(UserId.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (InformeId.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(InformeId.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy(ByVal UserId As Global.System.Nullable(Of Integer), ByVal InformeId As Global.System.Nullable(Of Integer)) As appointmentDataDS.AppointmentsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (UserId.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(UserId.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (InformeId.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(InformeId.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As appointmentDataDS.AppointmentsDataTable = New appointmentDataDS.AppointmentsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As appointmentDataDS.AppointmentsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As appointmentDataDS) As Integer
            Return Me.Adapter.Update(dataSet, "Appointments")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_UniqueID As Integer, ByVal Original_Type As Global.System.Nullable(Of Integer), ByVal Original_StartDate As Global.System.Nullable(Of Date), ByVal Original_EndDate As Global.System.Nullable(Of Date), ByVal Original_AllDay As Global.System.Nullable(Of Boolean), ByVal Original_Subject As String, ByVal Original_Location As String, ByVal Original_Status As Global.System.Nullable(Of Integer), ByVal Original_Label As Global.System.Nullable(Of Integer), ByVal Original_ResourceID As Global.System.Nullable(Of Integer), ByVal Original_UserId As Global.System.Nullable(Of Integer), ByVal Original_InformeId As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_UniqueID,Integer)
            If (Original_Type.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Type.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_StartDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_StartDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_EndDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_EndDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_AllDay.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_AllDay.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_Subject Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Subject,String)
            End If
            If (Original_Location Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Location,String)
            End If
            If (Original_Status.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Status.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_Label.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Label.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_ResourceID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_ResourceID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_UserId.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_UserId.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_InformeId.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_InformeId.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Type As Global.System.Nullable(Of Integer),  _
                    ByVal StartDate As Global.System.Nullable(Of Date),  _
                    ByVal EndDate As Global.System.Nullable(Of Date),  _
                    ByVal AllDay As Global.System.Nullable(Of Boolean),  _
                    ByVal Subject As String,  _
                    ByVal Location As String,  _
                    ByVal Description As String,  _
                    ByVal Status As Global.System.Nullable(Of Integer),  _
                    ByVal Label As Global.System.Nullable(Of Integer),  _
                    ByVal ResourceID As Global.System.Nullable(Of Integer),  _
                    ByVal ResourceIDs As String,  _
                    ByVal ReminderInfo As String,  _
                    ByVal RecurrenceInfo As String,  _
                    ByVal CustomField1 As String,  _
                    ByVal UserId As Global.System.Nullable(Of Integer),  _
                    ByVal InformeId As Global.System.Nullable(Of Integer)) As Integer
            If (Type.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Type.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (StartDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(StartDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (EndDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(EndDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (AllDay.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(AllDay.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Subject Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Subject,String)
            End If
            If (Location Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Location,String)
            End If
            If (Description Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Description,String)
            End If
            If (Status.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Status.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Label.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Label.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (ResourceID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(ResourceID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (ResourceIDs Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(ResourceIDs,String)
            End If
            If (ReminderInfo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(ReminderInfo,String)
            End If
            If (RecurrenceInfo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(RecurrenceInfo,String)
            End If
            If (CustomField1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(CustomField1,String)
            End If
            If (UserId.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(UserId.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (InformeId.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(InformeId.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Type As Global.System.Nullable(Of Integer),  _
                    ByVal StartDate As Global.System.Nullable(Of Date),  _
                    ByVal EndDate As Global.System.Nullable(Of Date),  _
                    ByVal AllDay As Global.System.Nullable(Of Boolean),  _
                    ByVal Subject As String,  _
                    ByVal Location As String,  _
                    ByVal Description As String,  _
                    ByVal Status As Global.System.Nullable(Of Integer),  _
                    ByVal Label As Global.System.Nullable(Of Integer),  _
                    ByVal ResourceID As Global.System.Nullable(Of Integer),  _
                    ByVal ResourceIDs As String,  _
                    ByVal ReminderInfo As String,  _
                    ByVal RecurrenceInfo As String,  _
                    ByVal CustomField1 As String,  _
                    ByVal UserId As Global.System.Nullable(Of Integer),  _
                    ByVal InformeId As Global.System.Nullable(Of Integer),  _
                    ByVal Original_UniqueID As Integer,  _
                    ByVal Original_Type As Global.System.Nullable(Of Integer),  _
                    ByVal Original_StartDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_EndDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_AllDay As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Subject As String,  _
                    ByVal Original_Location As String,  _
                    ByVal Original_Status As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Label As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ResourceID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_UserId As Global.System.Nullable(Of Integer),  _
                    ByVal Original_InformeId As Global.System.Nullable(Of Integer),  _
                    ByVal UniqueID As Integer) As Integer
            If (Type.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Type.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (StartDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(StartDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (EndDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(EndDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (AllDay.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(AllDay.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Subject Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Subject,String)
            End If
            If (Location Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Location,String)
            End If
            If (Description Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Description,String)
            End If
            If (Status.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Status.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Label.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Label.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (ResourceID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(ResourceID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (ResourceIDs Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(ResourceIDs,String)
            End If
            If (ReminderInfo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(ReminderInfo,String)
            End If
            If (RecurrenceInfo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(RecurrenceInfo,String)
            End If
            If (CustomField1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(CustomField1,String)
            End If
            If (UserId.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(UserId.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (InformeId.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(InformeId.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_UniqueID,Integer)
            If (Original_Type.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_Type.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_StartDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_StartDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_EndDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_EndDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_AllDay.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_AllDay.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_Subject Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_Subject,String)
            End If
            If (Original_Location Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_Location,String)
            End If
            If (Original_Status.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_Status.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_Label.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_Label.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_ResourceID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_ResourceID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_UserId.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_UserId.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_InformeId.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_InformeId.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(UniqueID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Type As Global.System.Nullable(Of Integer),  _
                    ByVal StartDate As Global.System.Nullable(Of Date),  _
                    ByVal EndDate As Global.System.Nullable(Of Date),  _
                    ByVal AllDay As Global.System.Nullable(Of Boolean),  _
                    ByVal Subject As String,  _
                    ByVal Location As String,  _
                    ByVal Description As String,  _
                    ByVal Status As Global.System.Nullable(Of Integer),  _
                    ByVal Label As Global.System.Nullable(Of Integer),  _
                    ByVal ResourceID As Global.System.Nullable(Of Integer),  _
                    ByVal ResourceIDs As String,  _
                    ByVal ReminderInfo As String,  _
                    ByVal RecurrenceInfo As String,  _
                    ByVal CustomField1 As String,  _
                    ByVal UserId As Global.System.Nullable(Of Integer),  _
                    ByVal InformeId As Global.System.Nullable(Of Integer),  _
                    ByVal Original_UniqueID As Integer,  _
                    ByVal Original_Type As Global.System.Nullable(Of Integer),  _
                    ByVal Original_StartDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_EndDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_AllDay As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Subject As String,  _
                    ByVal Original_Location As String,  _
                    ByVal Original_Status As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Label As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ResourceID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_UserId As Global.System.Nullable(Of Integer),  _
                    ByVal Original_InformeId As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(Type, StartDate, EndDate, AllDay, Subject, Location, Description, Status, Label, ResourceID, ResourceIDs, ReminderInfo, RecurrenceInfo, CustomField1, UserId, InformeId, Original_UniqueID, Original_Type, Original_StartDate, Original_EndDate, Original_AllDay, Original_Subject, Original_Location, Original_Status, Original_Label, Original_ResourceID, Original_UserId, Original_InformeId, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ResourcesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Resources"
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            tableMapping.ColumnMappings.Add("ResourceID", "ResourceID")
            tableMapping.ColumnMappings.Add("ResourceName", "ResourceName")
            tableMapping.ColumnMappings.Add("Color", "Color")
            tableMapping.ColumnMappings.Add("Image", "Image")
            tableMapping.ColumnMappings.Add("CustomField1", "CustomField1")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Resources] WHERE (([UniqueID] = @Original_UniqueID) AND ([Reso"& _ 
                "urceID] = @Original_ResourceID) AND ((@IsNull_ResourceName = 1 AND [ResourceName"& _ 
                "] IS NULL) OR ([ResourceName] = @Original_ResourceName)) AND ((@IsNull_Color = 1"& _ 
                " AND [Color] IS NULL) OR ([Color] = @Original_Color)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ResourceID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ResourceName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ResourceName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Color", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Color", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Color", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Color", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Resources] ([ResourceID], [ResourceName], [Color], [Image], [C"& _ 
                "ustomField1]) VALUES (@ResourceID, @ResourceName, @Color, @Image, @CustomField1)"& _ 
                ";"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT UniqueID, ResourceID, ResourceName, Color, Image, CustomField1 FROM Re"& _ 
                "sources WHERE (UniqueID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ResourceID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ResourceName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Color", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Color", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Image", Global.System.Data.SqlDbType.Image, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Image", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomField1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomField1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Resources] SET [ResourceID] = @ResourceID, [ResourceName] = @Resour"& _ 
                "ceName, [Color] = @Color, [Image] = @Image, [CustomField1] = @CustomField1 WHERE"& _ 
                " (([UniqueID] = @Original_UniqueID) AND ([ResourceID] = @Original_ResourceID) AN"& _ 
                "D ((@IsNull_ResourceName = 1 AND [ResourceName] IS NULL) OR ([ResourceName] = @O"& _ 
                "riginal_ResourceName)) AND ((@IsNull_Color = 1 AND [Color] IS NULL) OR ([Color] "& _ 
                "= @Original_Color)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT UniqueID, ResourceID, ResourceName, Color, Image, "& _ 
                "CustomField1 FROM Resources WHERE (UniqueID = @UniqueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ResourceID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ResourceName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Color", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Color", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Image", Global.System.Data.SqlDbType.Image, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Image", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomField1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomField1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ResourceID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ResourceName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ResourceName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ResourceName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Color", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Color", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Color", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Color", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SISOTEC.My.MySettings.Default.dbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT UniqueID, ResourceID, ResourceName, Color, Image, CustomField1 FROM dbo.Re"& _ 
                "sources"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As appointmentDataDS.ResourcesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As appointmentDataDS.ResourcesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As appointmentDataDS.ResourcesDataTable = New appointmentDataDS.ResourcesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As appointmentDataDS.ResourcesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As appointmentDataDS) As Integer
            Return Me.Adapter.Update(dataSet, "Resources")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_UniqueID As Integer, ByVal Original_ResourceID As Integer, ByVal Original_ResourceName As String, ByVal Original_Color As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_UniqueID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ResourceID,Integer)
            If (Original_ResourceName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ResourceName,String)
            End If
            If (Original_Color.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Color.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ResourceID As Integer, ByVal ResourceName As String, ByVal Color As Global.System.Nullable(Of Integer), ByVal Image() As Byte, ByVal CustomField1 As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ResourceID,Integer)
            If (ResourceName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ResourceName,String)
            End If
            If (Color.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Color.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Image Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Image,Byte())
            End If
            If (CustomField1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CustomField1,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ResourceID As Integer, ByVal ResourceName As String, ByVal Color As Global.System.Nullable(Of Integer), ByVal Image() As Byte, ByVal CustomField1 As String, ByVal Original_UniqueID As Integer, ByVal Original_ResourceID As Integer, ByVal Original_ResourceName As String, ByVal Original_Color As Global.System.Nullable(Of Integer), ByVal UniqueID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ResourceID,Integer)
            If (ResourceName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ResourceName,String)
            End If
            If (Color.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Color.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Image Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Image,Byte())
            End If
            If (CustomField1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CustomField1,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_UniqueID,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ResourceID,Integer)
            If (Original_ResourceName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_ResourceName,String)
            End If
            If (Original_Color.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_Color.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(UniqueID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ResourceID As Integer, ByVal ResourceName As String, ByVal Color As Global.System.Nullable(Of Integer), ByVal Image() As Byte, ByVal CustomField1 As String, ByVal Original_UniqueID As Integer, ByVal Original_ResourceID As Integer, ByVal Original_ResourceName As String, ByVal Original_Color As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(ResourceID, ResourceName, Color, Image, CustomField1, Original_UniqueID, Original_ResourceID, Original_ResourceName, Original_Color, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CEINFO_INFORMETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CEINFO_INFORME"
            tableMapping.ColumnMappings.Add("CEINFO_CODIGO", "CEINFO_CODIGO")
            tableMapping.ColumnMappings.Add("CENOTI_CODIGO", "CENOTI_CODIGO")
            tableMapping.ColumnMappings.Add("CEINFO_DISOPR", "CEINFO_DISOPR")
            tableMapping.ColumnMappings.Add("CEINFO_SITVIV", "CEINFO_SITVIV")
            tableMapping.ColumnMappings.Add("CEINFO_ENTREA", "CEINFO_ENTREA")
            tableMapping.ColumnMappings.Add("CEINFO_ACCREA", "CEINFO_ACCREA")
            tableMapping.ColumnMappings.Add("CEINFO_CONREC", "CEINFO_CONREC")
            tableMapping.ColumnMappings.Add("CEINFO_ESTSAL", "CEINFO_ESTSAL")
            tableMapping.ColumnMappings.Add("CEINFO_NEASME", "CEINFO_NEASME")
            tableMapping.ColumnMappings.Add("CEINFO_TIECUR", "CEINFO_TIECUR")
            tableMapping.ColumnMappings.Add("CEINFO_PRIOCU", "CEINFO_PRIOCU")
            tableMapping.ColumnMappings.Add("CEINFO_TASFUN", "CEINFO_TASFUN")
            tableMapping.ColumnMappings.Add("CEINFO_CICATR", "CEINFO_CICATR")
            tableMapping.ColumnMappings.Add("CEINFO_FECINI", "CEINFO_FECINI")
            tableMapping.ColumnMappings.Add("CEINFO_FECFIN", "CEINFO_FECFIN")
            tableMapping.ColumnMappings.Add("CEINFO_TIPOXX", "CEINFO_TIPOXX")
            tableMapping.ColumnMappings.Add("CEINFO_METAPL", "CEINFO_METAPL")
            tableMapping.ColumnMappings.Add("CEPERS_CODIGO", "CEPERS_CODIGO")
            tableMapping.ColumnMappings.Add("CEHOR_HORA", "CEHOR_HORA")
            tableMapping.ColumnMappings.Add("CEINFO_ESTADO", "CEINFO_ESTADO")
            tableMapping.ColumnMappings.Add("CEINFO_ESTADOSISTEMA", "CEINFO_ESTADOSISTEMA")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[CEINFO_INFORME] WHERE (([CEINFO_CODIGO] = @Original_CEINFO_COD"& _ 
                "IGO) AND ((@IsNull_CENOTI_CODIGO = 1 AND [CENOTI_CODIGO] IS NULL) OR ([CENOTI_CO"& _ 
                "DIGO] = @Original_CENOTI_CODIGO)) AND ((@IsNull_CEINFO_DISOPR = 1 AND [CEINFO_DI"& _ 
                "SOPR] IS NULL) OR ([CEINFO_DISOPR] = @Original_CEINFO_DISOPR)) AND ((@IsNull_CEI"& _ 
                "NFO_SITVIV = 1 AND [CEINFO_SITVIV] IS NULL) OR ([CEINFO_SITVIV] = @Original_CEIN"& _ 
                "FO_SITVIV)) AND ((@IsNull_CEINFO_ENTREA = 1 AND [CEINFO_ENTREA] IS NULL) OR ([CE"& _ 
                "INFO_ENTREA] = @Original_CEINFO_ENTREA)) AND ((@IsNull_CEINFO_ACCREA = 1 AND [CE"& _ 
                "INFO_ACCREA] IS NULL) OR ([CEINFO_ACCREA] = @Original_CEINFO_ACCREA)) AND ((@IsN"& _ 
                "ull_CEINFO_CONREC = 1 AND [CEINFO_CONREC] IS NULL) OR ([CEINFO_CONREC] = @Origin"& _ 
                "al_CEINFO_CONREC)) AND ((@IsNull_CEINFO_ESTSAL = 1 AND [CEINFO_ESTSAL] IS NULL) "& _ 
                "OR ([CEINFO_ESTSAL] = @Original_CEINFO_ESTSAL)) AND ((@IsNull_CEINFO_NEASME = 1 "& _ 
                "AND [CEINFO_NEASME] IS NULL) OR ([CEINFO_NEASME] = @Original_CEINFO_NEASME)) AND"& _ 
                " ((@IsNull_CEINFO_TIECUR = 1 AND [CEINFO_TIECUR] IS NULL) OR ([CEINFO_TIECUR] = "& _ 
                "@Original_CEINFO_TIECUR)) AND ((@IsNull_CEINFO_PRIOCU = 1 AND [CEINFO_PRIOCU] IS"& _ 
                " NULL) OR ([CEINFO_PRIOCU] = @Original_CEINFO_PRIOCU)) AND ((@IsNull_CEINFO_TASF"& _ 
                "UN = 1 AND [CEINFO_TASFUN] IS NULL) OR ([CEINFO_TASFUN] = @Original_CEINFO_TASFU"& _ 
                "N)) AND ((@IsNull_CEINFO_CICATR = 1 AND [CEINFO_CICATR] IS NULL) OR ([CEINFO_CIC"& _ 
                "ATR] = @Original_CEINFO_CICATR)) AND ((@IsNull_CEINFO_FECINI = 1 AND [CEINFO_FEC"& _ 
                "INI] IS NULL) OR ([CEINFO_FECINI] = @Original_CEINFO_FECINI)) AND ((@IsNull_CEIN"& _ 
                "FO_FECFIN = 1 AND [CEINFO_FECFIN] IS NULL) OR ([CEINFO_FECFIN] = @Original_CEINF"& _ 
                "O_FECFIN)) AND ((@IsNull_CEINFO_TIPOXX = 1 AND [CEINFO_TIPOXX] IS NULL) OR ([CEI"& _ 
                "NFO_TIPOXX] = @Original_CEINFO_TIPOXX)) AND ((@IsNull_CEINFO_METAPL = 1 AND [CEI"& _ 
                "NFO_METAPL] IS NULL) OR ([CEINFO_METAPL] = @Original_CEINFO_METAPL)) AND ((@IsNu"& _ 
                "ll_CEPERS_CODIGO = 1 AND [CEPERS_CODIGO] IS NULL) OR ([CEPERS_CODIGO] = @Origina"& _ 
                "l_CEPERS_CODIGO)) AND ((@IsNull_CEHOR_HORA = 1 AND [CEHOR_HORA] IS NULL) OR ([CE"& _ 
                "HOR_HORA] = @Original_CEHOR_HORA)) AND ((@IsNull_CEINFO_ESTADO = 1 AND [CEINFO_E"& _ 
                "STADO] IS NULL) OR ([CEINFO_ESTADO] = @Original_CEINFO_ESTADO)) AND ((@IsNull_CE"& _ 
                "INFO_ESTADOSISTEMA = 1 AND [CEINFO_ESTADOSISTEMA] IS NULL) OR ([CEINFO_ESTADOSIS"& _ 
                "TEMA] = @Original_CEINFO_ESTADOSISTEMA)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEINFO_CODIGO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_CODIGO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CENOTI_CODIGO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CENOTI_CODIGO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CENOTI_CODIGO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CENOTI_CODIGO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CEINFO_DISOPR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_DISOPR", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEINFO_DISOPR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_DISOPR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CEINFO_SITVIV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_SITVIV", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEINFO_SITVIV", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_SITVIV", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CEINFO_ENTREA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_ENTREA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEINFO_ENTREA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_ENTREA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CEINFO_ACCREA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_ACCREA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEINFO_ACCREA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_ACCREA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CEINFO_CONREC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_CONREC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEINFO_CONREC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_CONREC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CEINFO_ESTSAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_ESTSAL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEINFO_ESTSAL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_ESTSAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CEINFO_NEASME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_NEASME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEINFO_NEASME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_NEASME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CEINFO_TIECUR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_TIECUR", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEINFO_TIECUR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_TIECUR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CEINFO_PRIOCU", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_PRIOCU", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEINFO_PRIOCU", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_PRIOCU", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CEINFO_TASFUN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_TASFUN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEINFO_TASFUN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_TASFUN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CEINFO_CICATR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_CICATR", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEINFO_CICATR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_CICATR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CEINFO_FECINI", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_FECINI", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEINFO_FECINI", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_FECINI", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CEINFO_FECFIN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_FECFIN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEINFO_FECFIN", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_FECFIN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CEINFO_TIPOXX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_TIPOXX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEINFO_TIPOXX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_TIPOXX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CEINFO_METAPL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_METAPL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEINFO_METAPL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_METAPL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CEPERS_CODIGO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEPERS_CODIGO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEPERS_CODIGO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEPERS_CODIGO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CEHOR_HORA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEHOR_HORA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEHOR_HORA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEHOR_HORA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CEINFO_ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_ESTADO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEINFO_ESTADO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_ESTADO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CEINFO_ESTADOSISTEMA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_ESTADOSISTEMA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEINFO_ESTADOSISTEMA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_ESTADOSISTEMA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[CEINFO_INFORME] ([CENOTI_CODIGO], [CEINFO_DISOPR], [CEINFO_SIT"& _ 
                "VIV], [CEINFO_ENTREA], [CEINFO_ACCREA], [CEINFO_CONREC], [CEINFO_ESTSAL], [CEINF"& _ 
                "O_NEASME], [CEINFO_TIECUR], [CEINFO_PRIOCU], [CEINFO_TASFUN], [CEINFO_CICATR], ["& _ 
                "CEINFO_FECINI], [CEINFO_FECFIN], [CEINFO_TIPOXX], [CEINFO_METAPL], [CEPERS_CODIG"& _ 
                "O], [CEHOR_HORA], [CEINFO_ESTADO], [CEINFO_ESTADOSISTEMA]) VALUES (@CENOTI_CODIG"& _ 
                "O, @CEINFO_DISOPR, @CEINFO_SITVIV, @CEINFO_ENTREA, @CEINFO_ACCREA, @CEINFO_CONRE"& _ 
                "C, @CEINFO_ESTSAL, @CEINFO_NEASME, @CEINFO_TIECUR, @CEINFO_PRIOCU, @CEINFO_TASFU"& _ 
                "N, @CEINFO_CICATR, @CEINFO_FECINI, @CEINFO_FECFIN, @CEINFO_TIPOXX, @CEINFO_METAP"& _ 
                "L, @CEPERS_CODIGO, @CEHOR_HORA, @CEINFO_ESTADO, @CEINFO_ESTADOSISTEMA);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT "& _ 
                "CEINFO_CODIGO, CENOTI_CODIGO, CEINFO_DISOPR, CEINFO_SITVIV, CEINFO_ENTREA, CEINF"& _ 
                "O_ACCREA, CEINFO_CONREC, CEINFO_ESTSAL, CEINFO_NEASME, CEINFO_TIECUR, CEINFO_PRI"& _ 
                "OCU, CEINFO_TASFUN, CEINFO_CICATR, CEINFO_FECINI, CEINFO_FECFIN, CEINFO_TIPOXX, "& _ 
                "CEINFO_METAPL, CEPERS_CODIGO, CEHOR_HORA, CEINFO_ESTADO, CEINFO_ESTADOSISTEMA FR"& _ 
                "OM CEINFO_INFORME WHERE (CEINFO_CODIGO = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CENOTI_CODIGO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CENOTI_CODIGO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEINFO_DISOPR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_DISOPR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEINFO_SITVIV", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_SITVIV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEINFO_ENTREA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_ENTREA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEINFO_ACCREA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_ACCREA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEINFO_CONREC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_CONREC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEINFO_ESTSAL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_ESTSAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEINFO_NEASME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_NEASME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEINFO_TIECUR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_TIECUR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEINFO_PRIOCU", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_PRIOCU", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEINFO_TASFUN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_TASFUN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEINFO_CICATR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_CICATR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEINFO_FECINI", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_FECINI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEINFO_FECFIN", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_FECFIN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEINFO_TIPOXX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_TIPOXX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEINFO_METAPL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_METAPL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEPERS_CODIGO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEPERS_CODIGO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEHOR_HORA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEHOR_HORA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEINFO_ESTADO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_ESTADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEINFO_ESTADOSISTEMA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_ESTADOSISTEMA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[CEINFO_INFORME] SET [CENOTI_CODIGO] = @CENOTI_CODIGO, [CEINFO_DISOP"& _ 
                "R] = @CEINFO_DISOPR, [CEINFO_SITVIV] = @CEINFO_SITVIV, [CEINFO_ENTREA] = @CEINFO"& _ 
                "_ENTREA, [CEINFO_ACCREA] = @CEINFO_ACCREA, [CEINFO_CONREC] = @CEINFO_CONREC, [CE"& _ 
                "INFO_ESTSAL] = @CEINFO_ESTSAL, [CEINFO_NEASME] = @CEINFO_NEASME, [CEINFO_TIECUR]"& _ 
                " = @CEINFO_TIECUR, [CEINFO_PRIOCU] = @CEINFO_PRIOCU, [CEINFO_TASFUN] = @CEINFO_T"& _ 
                "ASFUN, [CEINFO_CICATR] = @CEINFO_CICATR, [CEINFO_FECINI] = @CEINFO_FECINI, [CEIN"& _ 
                "FO_FECFIN] = @CEINFO_FECFIN, [CEINFO_TIPOXX] = @CEINFO_TIPOXX, [CEINFO_METAPL] ="& _ 
                " @CEINFO_METAPL, [CEPERS_CODIGO] = @CEPERS_CODIGO, [CEHOR_HORA] = @CEHOR_HORA, ["& _ 
                "CEINFO_ESTADO] = @CEINFO_ESTADO, [CEINFO_ESTADOSISTEMA] = @CEINFO_ESTADOSISTEMA "& _ 
                "WHERE (([CEINFO_CODIGO] = @Original_CEINFO_CODIGO) AND ((@IsNull_CENOTI_CODIGO ="& _ 
                " 1 AND [CENOTI_CODIGO] IS NULL) OR ([CENOTI_CODIGO] = @Original_CENOTI_CODIGO)) "& _ 
                "AND ((@IsNull_CEINFO_DISOPR = 1 AND [CEINFO_DISOPR] IS NULL) OR ([CEINFO_DISOPR]"& _ 
                " = @Original_CEINFO_DISOPR)) AND ((@IsNull_CEINFO_SITVIV = 1 AND [CEINFO_SITVIV]"& _ 
                " IS NULL) OR ([CEINFO_SITVIV] = @Original_CEINFO_SITVIV)) AND ((@IsNull_CEINFO_E"& _ 
                "NTREA = 1 AND [CEINFO_ENTREA] IS NULL) OR ([CEINFO_ENTREA] = @Original_CEINFO_EN"& _ 
                "TREA)) AND ((@IsNull_CEINFO_ACCREA = 1 AND [CEINFO_ACCREA] IS NULL) OR ([CEINFO_"& _ 
                "ACCREA] = @Original_CEINFO_ACCREA)) AND ((@IsNull_CEINFO_CONREC = 1 AND [CEINFO_"& _ 
                "CONREC] IS NULL) OR ([CEINFO_CONREC] = @Original_CEINFO_CONREC)) AND ((@IsNull_C"& _ 
                "EINFO_ESTSAL = 1 AND [CEINFO_ESTSAL] IS NULL) OR ([CEINFO_ESTSAL] = @Original_CE"& _ 
                "INFO_ESTSAL)) AND ((@IsNull_CEINFO_NEASME = 1 AND [CEINFO_NEASME] IS NULL) OR (["& _ 
                "CEINFO_NEASME] = @Original_CEINFO_NEASME)) AND ((@IsNull_CEINFO_TIECUR = 1 AND ["& _ 
                "CEINFO_TIECUR] IS NULL) OR ([CEINFO_TIECUR] = @Original_CEINFO_TIECUR)) AND ((@I"& _ 
                "sNull_CEINFO_PRIOCU = 1 AND [CEINFO_PRIOCU] IS NULL) OR ([CEINFO_PRIOCU] = @Orig"& _ 
                "inal_CEINFO_PRIOCU)) AND ((@IsNull_CEINFO_TASFUN = 1 AND [CEINFO_TASFUN] IS NULL"& _ 
                ") OR ([CEINFO_TASFUN] = @Original_CEINFO_TASFUN)) AND ((@IsNull_CEINFO_CICATR = "& _ 
                "1 AND [CEINFO_CICATR] IS NULL) OR ([CEINFO_CICATR] = @Original_CEINFO_CICATR)) A"& _ 
                "ND ((@IsNull_CEINFO_FECINI = 1 AND [CEINFO_FECINI] IS NULL) OR ([CEINFO_FECINI] "& _ 
                "= @Original_CEINFO_FECINI)) AND ((@IsNull_CEINFO_FECFIN = 1 AND [CEINFO_FECFIN] "& _ 
                "IS NULL) OR ([CEINFO_FECFIN] = @Original_CEINFO_FECFIN)) AND ((@IsNull_CEINFO_TI"& _ 
                "POXX = 1 AND [CEINFO_TIPOXX] IS NULL) OR ([CEINFO_TIPOXX] = @Original_CEINFO_TIP"& _ 
                "OXX)) AND ((@IsNull_CEINFO_METAPL = 1 AND [CEINFO_METAPL] IS NULL) OR ([CEINFO_M"& _ 
                "ETAPL] = @Original_CEINFO_METAPL)) AND ((@IsNull_CEPERS_CODIGO = 1 AND [CEPERS_C"& _ 
                "ODIGO] IS NULL) OR ([CEPERS_CODIGO] = @Original_CEPERS_CODIGO)) AND ((@IsNull_CE"& _ 
                "HOR_HORA = 1 AND [CEHOR_HORA] IS NULL) OR ([CEHOR_HORA] = @Original_CEHOR_HORA))"& _ 
                " AND ((@IsNull_CEINFO_ESTADO = 1 AND [CEINFO_ESTADO] IS NULL) OR ([CEINFO_ESTADO"& _ 
                "] = @Original_CEINFO_ESTADO)) AND ((@IsNull_CEINFO_ESTADOSISTEMA = 1 AND [CEINFO"& _ 
                "_ESTADOSISTEMA] IS NULL) OR ([CEINFO_ESTADOSISTEMA] = @Original_CEINFO_ESTADOSIS"& _ 
                "TEMA)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CEINFO_CODIGO, CENOTI_CODIGO, CEINFO_DISOPR, CEINFO_SITVIV, CEI"& _ 
                "NFO_ENTREA, CEINFO_ACCREA, CEINFO_CONREC, CEINFO_ESTSAL, CEINFO_NEASME, CEINFO_T"& _ 
                "IECUR, CEINFO_PRIOCU, CEINFO_TASFUN, CEINFO_CICATR, CEINFO_FECINI, CEINFO_FECFIN"& _ 
                ", CEINFO_TIPOXX, CEINFO_METAPL, CEPERS_CODIGO, CEHOR_HORA, CEINFO_ESTADO, CEINFO"& _ 
                "_ESTADOSISTEMA FROM CEINFO_INFORME WHERE (CEINFO_CODIGO = @CEINFO_CODIGO)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CENOTI_CODIGO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CENOTI_CODIGO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEINFO_DISOPR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_DISOPR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEINFO_SITVIV", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_SITVIV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEINFO_ENTREA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_ENTREA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEINFO_ACCREA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_ACCREA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEINFO_CONREC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_CONREC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEINFO_ESTSAL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_ESTSAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEINFO_NEASME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_NEASME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEINFO_TIECUR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_TIECUR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEINFO_PRIOCU", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_PRIOCU", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEINFO_TASFUN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_TASFUN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEINFO_CICATR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_CICATR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEINFO_FECINI", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_FECINI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEINFO_FECFIN", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_FECFIN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEINFO_TIPOXX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_TIPOXX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEINFO_METAPL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_METAPL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEPERS_CODIGO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEPERS_CODIGO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEHOR_HORA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEHOR_HORA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEINFO_ESTADO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_ESTADO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEINFO_ESTADOSISTEMA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_ESTADOSISTEMA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEINFO_CODIGO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_CODIGO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CENOTI_CODIGO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CENOTI_CODIGO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CENOTI_CODIGO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CENOTI_CODIGO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CEINFO_DISOPR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_DISOPR", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEINFO_DISOPR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_DISOPR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CEINFO_SITVIV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_SITVIV", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEINFO_SITVIV", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_SITVIV", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CEINFO_ENTREA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_ENTREA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEINFO_ENTREA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_ENTREA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CEINFO_ACCREA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_ACCREA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEINFO_ACCREA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_ACCREA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CEINFO_CONREC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_CONREC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEINFO_CONREC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_CONREC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CEINFO_ESTSAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_ESTSAL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEINFO_ESTSAL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_ESTSAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CEINFO_NEASME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_NEASME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEINFO_NEASME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_NEASME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CEINFO_TIECUR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_TIECUR", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEINFO_TIECUR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_TIECUR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CEINFO_PRIOCU", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_PRIOCU", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEINFO_PRIOCU", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_PRIOCU", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CEINFO_TASFUN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_TASFUN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEINFO_TASFUN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_TASFUN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CEINFO_CICATR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_CICATR", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEINFO_CICATR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_CICATR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CEINFO_FECINI", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_FECINI", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEINFO_FECINI", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_FECINI", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CEINFO_FECFIN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_FECFIN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEINFO_FECFIN", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_FECFIN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CEINFO_TIPOXX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_TIPOXX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEINFO_TIPOXX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_TIPOXX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CEINFO_METAPL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_METAPL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEINFO_METAPL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_METAPL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CEPERS_CODIGO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEPERS_CODIGO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEPERS_CODIGO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEPERS_CODIGO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CEHOR_HORA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEHOR_HORA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEHOR_HORA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEHOR_HORA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CEINFO_ESTADO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_ESTADO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEINFO_ESTADO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_ESTADO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CEINFO_ESTADOSISTEMA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_ESTADOSISTEMA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CEINFO_ESTADOSISTEMA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_ESTADOSISTEMA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEINFO_CODIGO", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "CEINFO_CODIGO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SISOTEC.My.MySettings.Default.dbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CEINFO_CODIGO, CENOTI_CODIGO, CEINFO_DISOPR, CEINFO_SITVIV, CEINFO_ENTREA,"& _ 
                " CEINFO_ACCREA, CEINFO_CONREC, CEINFO_ESTSAL, CEINFO_NEASME, CEINFO_TIECUR, CEIN"& _ 
                "FO_PRIOCU, CEINFO_TASFUN, CEINFO_CICATR, CEINFO_FECINI, CEINFO_FECFIN, CEINFO_TI"& _ 
                "POXX, CEINFO_METAPL, CEPERS_CODIGO, CEHOR_HORA, CEINFO_ESTADO, CEINFO_ESTADOSIST"& _ 
                "EMA FROM dbo.CEINFO_INFORME"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT CEINFO_CODIGO, CENOTI_CODIGO, CEINFO_DISOPR, CEINFO_SITVIV, CEINFO_ENTREA,"& _ 
                " CEINFO_ACCREA, CEINFO_CONREC, CEINFO_ESTSAL, CEINFO_NEASME, CEINFO_TIECUR, CEIN"& _ 
                "FO_PRIOCU, CEINFO_TASFUN, CEINFO_CICATR, CEINFO_FECINI, CEINFO_FECFIN, CEINFO_TI"& _ 
                "POXX, CEINFO_METAPL, CEPERS_CODIGO, CEHOR_HORA, CEINFO_ESTADO, CEINFO_ESTADOSIST"& _ 
                "EMA FROM dbo.CEINFO_INFORME"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where CEPERS_CODIGO = @CEPERS_CODIGO"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CEPERS_CODIGO", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "CEPERS_CODIGO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As appointmentDataDS.CEINFO_INFORMEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As appointmentDataDS.CEINFO_INFORMEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As appointmentDataDS.CEINFO_INFORMEDataTable = New appointmentDataDS.CEINFO_INFORMEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As appointmentDataDS.CEINFO_INFORMEDataTable, ByVal CEPERS_CODIGO As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CEPERS_CODIGO.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CEPERS_CODIGO.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy(ByVal CEPERS_CODIGO As Global.System.Nullable(Of Integer)) As appointmentDataDS.CEINFO_INFORMEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CEPERS_CODIGO.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CEPERS_CODIGO.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As appointmentDataDS.CEINFO_INFORMEDataTable = New appointmentDataDS.CEINFO_INFORMEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As appointmentDataDS.CEINFO_INFORMEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As appointmentDataDS) As Integer
            Return Me.Adapter.Update(dataSet, "CEINFO_INFORME")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_CEINFO_CODIGO As Integer,  _
                    ByVal Original_CENOTI_CODIGO As Global.System.Nullable(Of Integer),  _
                    ByVal Original_CEINFO_DISOPR As String,  _
                    ByVal Original_CEINFO_SITVIV As String,  _
                    ByVal Original_CEINFO_ENTREA As String,  _
                    ByVal Original_CEINFO_ACCREA As String,  _
                    ByVal Original_CEINFO_CONREC As String,  _
                    ByVal Original_CEINFO_ESTSAL As String,  _
                    ByVal Original_CEINFO_NEASME As String,  _
                    ByVal Original_CEINFO_TIECUR As String,  _
                    ByVal Original_CEINFO_PRIOCU As String,  _
                    ByVal Original_CEINFO_TASFUN As String,  _
                    ByVal Original_CEINFO_CICATR As String,  _
                    ByVal Original_CEINFO_FECINI As Global.System.Nullable(Of Date),  _
                    ByVal Original_CEINFO_FECFIN As Global.System.Nullable(Of Date),  _
                    ByVal Original_CEINFO_TIPOXX As String,  _
                    ByVal Original_CEINFO_METAPL As String,  _
                    ByVal Original_CEPERS_CODIGO As Global.System.Nullable(Of Integer),  _
                    ByVal Original_CEHOR_HORA As String,  _
                    ByVal Original_CEINFO_ESTADO As String,  _
                    ByVal Original_CEINFO_ESTADOSISTEMA As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CEINFO_CODIGO,Integer)
            If (Original_CENOTI_CODIGO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CENOTI_CODIGO.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_CEINFO_DISOPR Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_CEINFO_DISOPR,String)
            End If
            If (Original_CEINFO_SITVIV Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_CEINFO_SITVIV,String)
            End If
            If (Original_CEINFO_ENTREA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_CEINFO_ENTREA,String)
            End If
            If (Original_CEINFO_ACCREA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_CEINFO_ACCREA,String)
            End If
            If (Original_CEINFO_CONREC Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_CEINFO_CONREC,String)
            End If
            If (Original_CEINFO_ESTSAL Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_CEINFO_ESTSAL,String)
            End If
            If (Original_CEINFO_NEASME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_CEINFO_NEASME,String)
            End If
            If (Original_CEINFO_TIECUR Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_CEINFO_TIECUR,String)
            End If
            If (Original_CEINFO_PRIOCU Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_CEINFO_PRIOCU,String)
            End If
            If (Original_CEINFO_TASFUN Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_CEINFO_TASFUN,String)
            End If
            If (Original_CEINFO_CICATR Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_CEINFO_CICATR,String)
            End If
            If (Original_CEINFO_FECINI.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_CEINFO_FECINI.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_CEINFO_FECFIN.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_CEINFO_FECFIN.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_CEINFO_TIPOXX Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_CEINFO_TIPOXX,String)
            End If
            If (Original_CEINFO_METAPL Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_CEINFO_METAPL,String)
            End If
            If (Original_CEPERS_CODIGO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_CEPERS_CODIGO.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_CEHOR_HORA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_CEHOR_HORA,String)
            End If
            If (Original_CEINFO_ESTADO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_CEINFO_ESTADO,String)
            End If
            If (Original_CEINFO_ESTADOSISTEMA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_CEINFO_ESTADOSISTEMA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal CENOTI_CODIGO As Global.System.Nullable(Of Integer),  _
                    ByVal CEINFO_DISOPR As String,  _
                    ByVal CEINFO_SITVIV As String,  _
                    ByVal CEINFO_ENTREA As String,  _
                    ByVal CEINFO_ACCREA As String,  _
                    ByVal CEINFO_CONREC As String,  _
                    ByVal CEINFO_ESTSAL As String,  _
                    ByVal CEINFO_NEASME As String,  _
                    ByVal CEINFO_TIECUR As String,  _
                    ByVal CEINFO_PRIOCU As String,  _
                    ByVal CEINFO_TASFUN As String,  _
                    ByVal CEINFO_CICATR As String,  _
                    ByVal CEINFO_FECINI As Global.System.Nullable(Of Date),  _
                    ByVal CEINFO_FECFIN As Global.System.Nullable(Of Date),  _
                    ByVal CEINFO_TIPOXX As String,  _
                    ByVal CEINFO_METAPL As String,  _
                    ByVal CEPERS_CODIGO As Global.System.Nullable(Of Integer),  _
                    ByVal CEHOR_HORA As String,  _
                    ByVal CEINFO_ESTADO As String,  _
                    ByVal CEINFO_ESTADOSISTEMA As String) As Integer
            If (CENOTI_CODIGO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CENOTI_CODIGO.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (CEINFO_DISOPR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CEINFO_DISOPR,String)
            End If
            If (CEINFO_SITVIV Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CEINFO_SITVIV,String)
            End If
            If (CEINFO_ENTREA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CEINFO_ENTREA,String)
            End If
            If (CEINFO_ACCREA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CEINFO_ACCREA,String)
            End If
            If (CEINFO_CONREC Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(CEINFO_CONREC,String)
            End If
            If (CEINFO_ESTSAL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(CEINFO_ESTSAL,String)
            End If
            If (CEINFO_NEASME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(CEINFO_NEASME,String)
            End If
            If (CEINFO_TIECUR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(CEINFO_TIECUR,String)
            End If
            If (CEINFO_PRIOCU Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(CEINFO_PRIOCU,String)
            End If
            If (CEINFO_TASFUN Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(CEINFO_TASFUN,String)
            End If
            If (CEINFO_CICATR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(CEINFO_CICATR,String)
            End If
            If (CEINFO_FECINI.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(CEINFO_FECINI.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (CEINFO_FECFIN.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(CEINFO_FECFIN.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (CEINFO_TIPOXX Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(CEINFO_TIPOXX,String)
            End If
            If (CEINFO_METAPL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(CEINFO_METAPL,String)
            End If
            If (CEPERS_CODIGO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(CEPERS_CODIGO.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (CEHOR_HORA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(CEHOR_HORA,String)
            End If
            If (CEINFO_ESTADO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(CEINFO_ESTADO,String)
            End If
            If (CEINFO_ESTADOSISTEMA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(CEINFO_ESTADOSISTEMA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CENOTI_CODIGO As Global.System.Nullable(Of Integer),  _
                    ByVal CEINFO_DISOPR As String,  _
                    ByVal CEINFO_SITVIV As String,  _
                    ByVal CEINFO_ENTREA As String,  _
                    ByVal CEINFO_ACCREA As String,  _
                    ByVal CEINFO_CONREC As String,  _
                    ByVal CEINFO_ESTSAL As String,  _
                    ByVal CEINFO_NEASME As String,  _
                    ByVal CEINFO_TIECUR As String,  _
                    ByVal CEINFO_PRIOCU As String,  _
                    ByVal CEINFO_TASFUN As String,  _
                    ByVal CEINFO_CICATR As String,  _
                    ByVal CEINFO_FECINI As Global.System.Nullable(Of Date),  _
                    ByVal CEINFO_FECFIN As Global.System.Nullable(Of Date),  _
                    ByVal CEINFO_TIPOXX As String,  _
                    ByVal CEINFO_METAPL As String,  _
                    ByVal CEPERS_CODIGO As Global.System.Nullable(Of Integer),  _
                    ByVal CEHOR_HORA As String,  _
                    ByVal CEINFO_ESTADO As String,  _
                    ByVal CEINFO_ESTADOSISTEMA As String,  _
                    ByVal Original_CEINFO_CODIGO As Integer,  _
                    ByVal Original_CENOTI_CODIGO As Global.System.Nullable(Of Integer),  _
                    ByVal Original_CEINFO_DISOPR As String,  _
                    ByVal Original_CEINFO_SITVIV As String,  _
                    ByVal Original_CEINFO_ENTREA As String,  _
                    ByVal Original_CEINFO_ACCREA As String,  _
                    ByVal Original_CEINFO_CONREC As String,  _
                    ByVal Original_CEINFO_ESTSAL As String,  _
                    ByVal Original_CEINFO_NEASME As String,  _
                    ByVal Original_CEINFO_TIECUR As String,  _
                    ByVal Original_CEINFO_PRIOCU As String,  _
                    ByVal Original_CEINFO_TASFUN As String,  _
                    ByVal Original_CEINFO_CICATR As String,  _
                    ByVal Original_CEINFO_FECINI As Global.System.Nullable(Of Date),  _
                    ByVal Original_CEINFO_FECFIN As Global.System.Nullable(Of Date),  _
                    ByVal Original_CEINFO_TIPOXX As String,  _
                    ByVal Original_CEINFO_METAPL As String,  _
                    ByVal Original_CEPERS_CODIGO As Global.System.Nullable(Of Integer),  _
                    ByVal Original_CEHOR_HORA As String,  _
                    ByVal Original_CEINFO_ESTADO As String,  _
                    ByVal Original_CEINFO_ESTADOSISTEMA As String,  _
                    ByVal CEINFO_CODIGO As Integer) As Integer
            If (CENOTI_CODIGO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CENOTI_CODIGO.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (CEINFO_DISOPR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CEINFO_DISOPR,String)
            End If
            If (CEINFO_SITVIV Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CEINFO_SITVIV,String)
            End If
            If (CEINFO_ENTREA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CEINFO_ENTREA,String)
            End If
            If (CEINFO_ACCREA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CEINFO_ACCREA,String)
            End If
            If (CEINFO_CONREC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(CEINFO_CONREC,String)
            End If
            If (CEINFO_ESTSAL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(CEINFO_ESTSAL,String)
            End If
            If (CEINFO_NEASME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(CEINFO_NEASME,String)
            End If
            If (CEINFO_TIECUR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(CEINFO_TIECUR,String)
            End If
            If (CEINFO_PRIOCU Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(CEINFO_PRIOCU,String)
            End If
            If (CEINFO_TASFUN Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(CEINFO_TASFUN,String)
            End If
            If (CEINFO_CICATR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(CEINFO_CICATR,String)
            End If
            If (CEINFO_FECINI.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(CEINFO_FECINI.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (CEINFO_FECFIN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(CEINFO_FECFIN.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (CEINFO_TIPOXX Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(CEINFO_TIPOXX,String)
            End If
            If (CEINFO_METAPL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(CEINFO_METAPL,String)
            End If
            If (CEPERS_CODIGO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(CEPERS_CODIGO.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (CEHOR_HORA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(CEHOR_HORA,String)
            End If
            If (CEINFO_ESTADO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(CEINFO_ESTADO,String)
            End If
            If (CEINFO_ESTADOSISTEMA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(CEINFO_ESTADOSISTEMA,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_CEINFO_CODIGO,Integer)
            If (Original_CENOTI_CODIGO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_CENOTI_CODIGO.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_CEINFO_DISOPR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_CEINFO_DISOPR,String)
            End If
            If (Original_CEINFO_SITVIV Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_CEINFO_SITVIV,String)
            End If
            If (Original_CEINFO_ENTREA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_CEINFO_ENTREA,String)
            End If
            If (Original_CEINFO_ACCREA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_CEINFO_ACCREA,String)
            End If
            If (Original_CEINFO_CONREC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_CEINFO_CONREC,String)
            End If
            If (Original_CEINFO_ESTSAL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_CEINFO_ESTSAL,String)
            End If
            If (Original_CEINFO_NEASME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_CEINFO_NEASME,String)
            End If
            If (Original_CEINFO_TIECUR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_CEINFO_TIECUR,String)
            End If
            If (Original_CEINFO_PRIOCU Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_CEINFO_PRIOCU,String)
            End If
            If (Original_CEINFO_TASFUN Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_CEINFO_TASFUN,String)
            End If
            If (Original_CEINFO_CICATR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_CEINFO_CICATR,String)
            End If
            If (Original_CEINFO_FECINI.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_CEINFO_FECINI.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (Original_CEINFO_FECFIN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_CEINFO_FECFIN.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (Original_CEINFO_TIPOXX Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_CEINFO_TIPOXX,String)
            End If
            If (Original_CEINFO_METAPL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_CEINFO_METAPL,String)
            End If
            If (Original_CEPERS_CODIGO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_CEPERS_CODIGO.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (Original_CEHOR_HORA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_CEHOR_HORA,String)
            End If
            If (Original_CEINFO_ESTADO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(58).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(Original_CEINFO_ESTADO,String)
            End If
            If (Original_CEINFO_ESTADOSISTEMA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(60).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Original_CEINFO_ESTADOSISTEMA,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(61).Value = CType(CEINFO_CODIGO,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CENOTI_CODIGO As Global.System.Nullable(Of Integer),  _
                    ByVal CEINFO_DISOPR As String,  _
                    ByVal CEINFO_SITVIV As String,  _
                    ByVal CEINFO_ENTREA As String,  _
                    ByVal CEINFO_ACCREA As String,  _
                    ByVal CEINFO_CONREC As String,  _
                    ByVal CEINFO_ESTSAL As String,  _
                    ByVal CEINFO_NEASME As String,  _
                    ByVal CEINFO_TIECUR As String,  _
                    ByVal CEINFO_PRIOCU As String,  _
                    ByVal CEINFO_TASFUN As String,  _
                    ByVal CEINFO_CICATR As String,  _
                    ByVal CEINFO_FECINI As Global.System.Nullable(Of Date),  _
                    ByVal CEINFO_FECFIN As Global.System.Nullable(Of Date),  _
                    ByVal CEINFO_TIPOXX As String,  _
                    ByVal CEINFO_METAPL As String,  _
                    ByVal CEPERS_CODIGO As Global.System.Nullable(Of Integer),  _
                    ByVal CEHOR_HORA As String,  _
                    ByVal CEINFO_ESTADO As String,  _
                    ByVal CEINFO_ESTADOSISTEMA As String,  _
                    ByVal Original_CEINFO_CODIGO As Integer,  _
                    ByVal Original_CENOTI_CODIGO As Global.System.Nullable(Of Integer),  _
                    ByVal Original_CEINFO_DISOPR As String,  _
                    ByVal Original_CEINFO_SITVIV As String,  _
                    ByVal Original_CEINFO_ENTREA As String,  _
                    ByVal Original_CEINFO_ACCREA As String,  _
                    ByVal Original_CEINFO_CONREC As String,  _
                    ByVal Original_CEINFO_ESTSAL As String,  _
                    ByVal Original_CEINFO_NEASME As String,  _
                    ByVal Original_CEINFO_TIECUR As String,  _
                    ByVal Original_CEINFO_PRIOCU As String,  _
                    ByVal Original_CEINFO_TASFUN As String,  _
                    ByVal Original_CEINFO_CICATR As String,  _
                    ByVal Original_CEINFO_FECINI As Global.System.Nullable(Of Date),  _
                    ByVal Original_CEINFO_FECFIN As Global.System.Nullable(Of Date),  _
                    ByVal Original_CEINFO_TIPOXX As String,  _
                    ByVal Original_CEINFO_METAPL As String,  _
                    ByVal Original_CEPERS_CODIGO As Global.System.Nullable(Of Integer),  _
                    ByVal Original_CEHOR_HORA As String,  _
                    ByVal Original_CEINFO_ESTADO As String,  _
                    ByVal Original_CEINFO_ESTADOSISTEMA As String) As Integer
            Return Me.Update(CENOTI_CODIGO, CEINFO_DISOPR, CEINFO_SITVIV, CEINFO_ENTREA, CEINFO_ACCREA, CEINFO_CONREC, CEINFO_ESTSAL, CEINFO_NEASME, CEINFO_TIECUR, CEINFO_PRIOCU, CEINFO_TASFUN, CEINFO_CICATR, CEINFO_FECINI, CEINFO_FECFIN, CEINFO_TIPOXX, CEINFO_METAPL, CEPERS_CODIGO, CEHOR_HORA, CEINFO_ESTADO, CEINFO_ESTADOSISTEMA, Original_CEINFO_CODIGO, Original_CENOTI_CODIGO, Original_CEINFO_DISOPR, Original_CEINFO_SITVIV, Original_CEINFO_ENTREA, Original_CEINFO_ACCREA, Original_CEINFO_CONREC, Original_CEINFO_ESTSAL, Original_CEINFO_NEASME, Original_CEINFO_TIECUR, Original_CEINFO_PRIOCU, Original_CEINFO_TASFUN, Original_CEINFO_CICATR, Original_CEINFO_FECINI, Original_CEINFO_FECFIN, Original_CEINFO_TIPOXX, Original_CEINFO_METAPL, Original_CEPERS_CODIGO, Original_CEHOR_HORA, Original_CEINFO_ESTADO, Original_CEINFO_ESTADOSISTEMA, Original_CEINFO_CODIGO)
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _appointmentsTableAdapter As AppointmentsTableAdapter
        
        Private _resourcesTableAdapter As ResourcesTableAdapter
        
        Private _cEINFO_INFORMETableAdapter As CEINFO_INFORMETableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property AppointmentsTableAdapter() As AppointmentsTableAdapter
            Get
                Return Me._appointmentsTableAdapter
            End Get
            Set
                Me._appointmentsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ResourcesTableAdapter() As ResourcesTableAdapter
            Get
                Return Me._resourcesTableAdapter
            End Get
            Set
                Me._resourcesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CEINFO_INFORMETableAdapter() As CEINFO_INFORMETableAdapter
            Get
                Return Me._cEINFO_INFORMETableAdapter
            End Get
            Set
                Me._cEINFO_INFORMETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._appointmentsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._appointmentsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._appointmentsTableAdapter.Connection
                End If
                If ((Not (Me._resourcesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._resourcesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._resourcesTableAdapter.Connection
                End If
                If ((Not (Me._cEINFO_INFORMETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._cEINFO_INFORMETableAdapter.Connection) Is Nothing)) Then
                    Return Me._cEINFO_INFORMETableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._appointmentsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._resourcesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._cEINFO_INFORMETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As appointmentDataDS, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._cEINFO_INFORMETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CEINFO_INFORME.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._cEINFO_INFORMETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._resourcesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Resources.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._resourcesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._appointmentsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Appointments.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._appointmentsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As appointmentDataDS, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._cEINFO_INFORMETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CEINFO_INFORME.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._cEINFO_INFORMETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._resourcesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Resources.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._resourcesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._appointmentsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Appointments.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._appointmentsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As appointmentDataDS, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._appointmentsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Appointments.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._appointmentsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._resourcesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Resources.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._resourcesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._cEINFO_INFORMETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CEINFO_INFORME.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._cEINFO_INFORMETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As appointmentDataDS) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._appointmentsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._appointmentsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._resourcesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._resourcesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._cEINFO_INFORMETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._cEINFO_INFORMETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager no contiene información de conexión. Establezca cada propieda"& _ 
                        "d TableAdapterManager TableAdapter en una instancia TableAdapter válida.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("La transacción no puede comenzar. La conexión de datos actual no es compatible co"& _ 
                        "n las transacciones o el estado actual no permite que comience la transacción.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._appointmentsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._appointmentsTableAdapter, Me._appointmentsTableAdapter.Connection)
                    Me._appointmentsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._appointmentsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._appointmentsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._appointmentsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._appointmentsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._resourcesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._resourcesTableAdapter, Me._resourcesTableAdapter.Connection)
                    Me._resourcesTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._resourcesTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._resourcesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._resourcesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._resourcesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._cEINFO_INFORMETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._cEINFO_INFORMETableAdapter, Me._cEINFO_INFORMETableAdapter.Connection)
                    Me._cEINFO_INFORMETableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._cEINFO_INFORMETableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._cEINFO_INFORMETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._cEINFO_INFORMETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._cEINFO_INFORMETableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._appointmentsTableAdapter) Is Nothing) Then
                    Me._appointmentsTableAdapter.Connection = CType(revertConnections(Me._appointmentsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._appointmentsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._resourcesTableAdapter) Is Nothing) Then
                    Me._resourcesTableAdapter.Connection = CType(revertConnections(Me._resourcesTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._resourcesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._cEINFO_INFORMETableAdapter) Is Nothing) Then
                    Me._cEINFO_INFORMETableAdapter.Connection = CType(revertConnections(Me._cEINFO_INFORMETableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._cEINFO_INFORMETableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
